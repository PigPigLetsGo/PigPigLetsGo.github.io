{
    "version": "https://jsonfeed.org/version/1",
    "title": "homepage • All posts by \"axios\" tag",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io/homepage",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/%E9%BB%91%E9%A9%AC%E5%A4%B4%E6%9D%A1%E6%A1%88%E4%BE%8B/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/%E9%BB%91%E9%A9%AC%E5%A4%B4%E6%9D%A1%E6%A1%88%E4%BE%8B/",
            "title": "黑马头条案例-主要演示axios",
            "date_published": "2024-04-02T10:00:51.848Z",
            "content_html": "<p><strong>技术</strong>：</p>\n<ul>\n<li>基于 Bootstrap 搭建网站标签和样式</li>\n<li>集成<font title='red'>wangEditor 插件</font>实现富文本编辑器</li>\n<li>使用原生 JS 完成<font title='red'>增删改查</font>等业务</li>\n<li>基于 axios 与黑马头条线上接口交互</li>\n<li>使用<font title='red'>axios 拦截器</font>进行权限判断</li>\n</ul>\n<p>项目准备：准备配套的素材代码</p>\n<p>包含：html，css，js，静态图片，第三方插件等等</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151014703.png\" alt=\"image-20230815101452131\"></p>\n<p>目录管理：建议这样管理，方便查找</p>\n<ul>\n<li>assets：资源文件夹 (图片，字体等)</li>\n<li>lib：资料文件夹 (第三方插件，例如：form-serialize)</li>\n<li><font title='red'>page</font>：页面文件夹</li>\n<li><font title='red'>utils</font>：使用程序文件夹 (工具插件)</li>\n</ul>\n<h3 id=\"验证码登录\"><a class=\"markdownIt-Anchor\" href=\"#验证码登录\">#</a> 验证码登录</h3>\n<p><strong>目标</strong>：完成验证码登录，后端设置验证码默认为 246810</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>在 utils /request.js 配置 axios 请求 <font title='red'>基地址</font>.</p>\n<ul>\n<li>作用：提取公共前缀地址，配置后 axios 请求时都会 baseURL + url</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'http://geek.itheima.net'</span></pre></td></tr></table></figure><ul>\n<li><strong>解决的场景</strong>：防止后端频繁更换基地址，解决需要重新部署很多个页面的情况！</li>\n</ul>\n</li>\n<li>\n<p>收集手机号和验证码数据</p>\n</li>\n<li>\n<p>基于 axios 调用验证码登录接口</p>\n</li>\n<li>\n<p>使用 Boostrap 的 Alert 警告框反馈结果给用户</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151024505.png\" alt=\"image-20230815102437892\"></p>\n<p>request.js</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//axios 公共配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 基地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'http://geek.itheima.net'</span></pre></td></tr></table></figure><p>index.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标 1：验证码登录</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 1.1 在 utils/request.js 配置 axios 请求基地址</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 1.2 收集手机号和验证码数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 1.3 基于 axios 调用验证码登录接口</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 1.4 使用 Bootstrap 的 Alert 警告框反馈结果给用户</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 1.2 收集手机号和验证码数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.login-form'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 1.3 基于 axios 调用验证码登录接口</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'/v1_0/authorizations'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        data</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">myAlert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'登录成功'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">myAlert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'登录失败'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token comment\">// 手机号或验证码格式不正确</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>alert.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 弹窗插件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 需要先准备 alert 样式相关的 DOM</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * BS 的 Alert 警告框函数，2 秒后自动消失</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param &#123;*&#125; isSuccess 成功 true，失败 false</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @param &#123;*&#125; msg 提示消息</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myAlert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isSuccess<span class=\"token punctuation\">,</span> msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">const</span> myAlert <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.alert'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>isSuccess <span class=\"token operator\">?</span> <span class=\"token string\">'alert-success'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'alert-danger'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  myAlert<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> msg</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'show'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>isSuccess <span class=\"token operator\">?</span> <span class=\"token string\">'alert-success'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'alert-danger'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    myAlert<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'show'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151052133.png\" alt=\"image-20230815105239053\"></p>\n<h3 id=\"token的介绍\"><a class=\"markdownIt-Anchor\" href=\"#token的介绍\">#</a> token 的介绍</h3>\n<p><strong>概念</strong>：访问权限的<font title='red'>令牌</font>，本质上是一串 <font title='red'>字符串</font>.</p>\n<p><strong>创建</strong>：正确登录后，由后端签发并返回</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151054393.png\" alt=\"image-20230815105410152\"></p>\n<p><strong>作用</strong>：判断是否有<font title='red'>登录状态</font>等，控制访问权限</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151056291.png\" alt=\"image-20230815105559967\"></p>\n<p><strong>注意</strong>：<font title='red'>前端</font>只能判断 token<font title='red'>有无</font>，而<font title='red'>后端</font>才能判断 token 的<font title='red'>有效性</font>。</p>\n<h4 id=\"token的使用\"><a class=\"markdownIt-Anchor\" href=\"#token的使用\">#</a> token 的使用</h4>\n<p><strong>目标</strong>：只有登录状态，才可以访问内容页面</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>在 utils /auth.js 中判断无 token 令牌字符串，则强制跳转到登录页 (手动修改地址栏测试)</p>\n<ul>\n<li>核心代码</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> locaStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 没有 token 令牌字符串，则强制跳转登录页</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'../login/index.html'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在登录成功后，保存 token 令牌字符串到本地，再跳转到首页 (手动修改地址栏测试)</p>\n<ul>\n<li>核心代码</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 登录成功后，保存 token 令牌字符串到本地，并跳转到内容列表页面</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'../content/index.html'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<p>auth.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 权限插件（引入到了除登录页面，以外的其他所有页面）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 目标 1：访问权限控制</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 1.1 判断无 token 令牌字符串，则强制跳转到登录页</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 1.2 登录成功后，保存 token 令牌字符串到本地，并跳转到内容列表页面</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//  1.1 判断无 token 令牌字符串，则强制跳转到登录页</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'../login/index.html'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151151847.gif\" alt=\"test\"></p>\n<p>index.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标 1：验证码登录</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 1.1 在 utils/request.js 配置 axios 请求基地址</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 1.2 收集手机号和验证码数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 1.3 基于 axios 调用验证码登录接口</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 1.4 使用 Bootstrap 的 Alert 警告框反馈结果给用户</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 1.2 收集手机号和验证码数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.login-form'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 1.3 基于 axios 调用验证码登录接口</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'/v1_0/authorizations'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        data</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 1.4 使用 Bootstrap 的 Alert 警告框反馈结果给用户</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">myAlert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'登录成功'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 登录成功后，保存 token 令牌字符串到本地，并跳转到内容列表页面</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'../content/index.html'</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">myAlert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'登录失败'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token comment\">// 手机号或验证码格式不正确</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151157907.gif\" alt=\"test\"></p>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>token 的作用？\n<ul>\n<li><font title='red'>判断</font>用户是否有<font title='red'>登录状态</font>等</li>\n</ul>\n</li>\n<li>token 的注意：\n<ul>\n<li><font title='red'>前端</font>只能判断 token 的<font title='red'>有无</font>.</li>\n<li><font title='red'>后端</font>通过解密可以提取 token 字符串的原始信息，判断<font title='red'>有效性</font>.</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"个人信息设置和axios请求拦截器\"><a class=\"markdownIt-Anchor\" href=\"#个人信息设置和axios请求拦截器\">#</a> 个人信息设置和 axios 请求拦截器</h3>\n<p><strong>需求</strong>：设置用户昵称</p>\n<p><strong>语法</strong>：axioos 可以在 headers 选项传递请求头参数</p>\n<p><strong>问题</strong>：很多接口，都需要携带 token 令牌字符串</p>\n<p><strong>解决</strong>：在请求拦截器统一设置公共 headers 选项</p>\n<p><strong>axios 请求拦截器</strong>：发起请求之前，触发的配置函数，对<font title='red'>请求参数</font>进行额外配置</p>\n<ul>\n<li>基本结构</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加请求拦截器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 在发送请求之前做些什么</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 对请求错误做些什么</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img src=\"./%E9%BB%91%E9%A9%AC%E5%A4%B4%E6%9D%A1%E6%A1%88%E4%BE%8B.assets/202308151310161.png\" alt=\"token字符串\"></p>\n<p>auth.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标 2：设置个人信息</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 2.1 在 utils/request.js 设置请求拦截器，统一携带 token</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 2.2 请求个人信息并设置到页面</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'/v1_0/user/profile'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.nick-name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>request.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加请求拦截器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 在发送请求之前做些什么</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 统一携带 token 令牌字符串在请求头上</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 判断如果 token 不为空的话则将每个 header 请求头都加上 token</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    token <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>Authorization <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>token<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 对请求错误做些什么</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151327770.png\" alt=\"image-20230815132709455\"></p>\n<blockquote>\n<p><span alt='solid'>总结</span>：</p>\n<ol>\n<li>什么是 axios 请求拦截器？\n<ul>\n<li>发起请求之前，调用的一个<font title='red'>函数</font>，对<font title='red'>请求参数</font>进行<font title='red'>设置</font>.</li>\n</ul>\n</li>\n<li>axios 请求拦截器，什么时候使用？\n<ul>\n<li>有<font title='red'>公共配置</font>和设置时，统一设置在请求拦截器中</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"axios响应拦截器和身份验证失败\"><a class=\"markdownIt-Anchor\" href=\"#axios响应拦截器和身份验证失败\">#</a> axios 响应拦截器和身份验证失败</h3>\n<p>axios 响应拦截器：相应回到 then /catch 之前，触发的<font title='red'>拦截函数</font>，对<font title='red'>响应结果统一处理</font>.</p>\n<p><strong>例如</strong>：身份验证失败，统一判断并做处理。</p>\n<p><img src=\"./%E9%BB%91%E9%A9%AC%E5%A4%B4%E6%9D%A1%E6%A1%88%E4%BE%8B.assets/202308151332851.png\" alt=\"image-20230815133219452\"></p>\n<ul>\n<li>基本结构</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加响应拦截器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 2xx 范围内的状态码都会触发该函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 对响应数据做点什么</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 超出 2xx 范围的状态码都会触发该函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 对响应错误做点什么 例如：统一对 401 身份验证失败情况做出处理</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>判断内容页面的 token 的有效期或者是否是假的 token</p>\n<p>在内容页面中修改 localStorage 里面存储的 token 然后重新刷新页面请求一次后端，后端发现 token 不对就会响应一个错误信息，查看情况。</p>\n<p>修改内容页面的 token</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151344594.png\" alt=\"image-20230815134227005\"></p>\n<p>刷新页面请求服务器。</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151344975.png\" alt=\"image-20230815134314948\"></p>\n<p>request.js</p>\n<p>if 判断中使用到的？是判断当前函数是否为 undefined 或者 Null 这种不满足条件的情况，如果不满足则不执行后面的函数，满足则继续链式调用防止异常。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加响应拦截器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 2xx 范围内的状态码都会触发该函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 对响应数据做点什么</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 超出 2xx 范围的状态码都会触发该函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 对响应错误做点什么 例如：统一对 401 身份验证失败情况做出处理</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 使用？链式调用如果前端有一个不满足条件则不调用后面的函数防止异常</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>error<span class=\"token operator\">?.</span>response<span class=\"token operator\">?.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">401</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'身份验证失败，请重新登录'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//token 不正确或者过期则删除当前对应的 token</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 跳转至登录页面重新登录</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'../login/index.html'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151354833.gif\" alt=\"test\"></p>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>什么是 axios 响应拦截器？\n<ul>\n<li>响应回到 then /catch 之前，触发的<font title='red'>拦截函数</font>，对<font title='red'>响应结果统一处理</font>.</li>\n</ul>\n</li>\n<li>axios 响应拦截器，什么时候触发成功 / 失败的回调函数？\n<ul>\n<li>状态为<font title='red'>2xx</font>触发<font title='red'>成功</font>回调，<font title='red'>其它</font>则触发<font title='red'>失败</font>的回调函数</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"优化axios响应结果\"><a class=\"markdownIt-Anchor\" href=\"#优化axios响应结果\">#</a> 优化 axios 响应结果</h3>\n<p><strong>目标</strong>：axios 直接接收服务器返回的响应结果</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 个人信息</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'/v1_0/user/profile'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">//result: 服务器响应数据对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 文章列表</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'/v1_0/mp/articles'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">//result: 服务器响应数据对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>axios 内部封装的接口对象，它会将服务器返回的数据对象 挂载到 data 的属性下，所以我们想要访问它的昵称，那我们就需要在 result 中 这样调用 <a href=\"http://result.data.data.name\">result.data.data.name</a> 如果每次都需要这样的话就会显得比较麻烦，那么可以对其进行一下优化。</p>\n<p><img src=\"./%E9%BB%91%E9%A9%AC%E5%A4%B4%E6%9D%A1%E6%A1%88%E4%BE%8B.assets/202308151400480.png\" alt=\"image-20230815140057937\"></p>\n<p>我们可以基于 axios 的响应拦截器来完成</p>\n<p>在 request.js 中对响应拦截器进行编写</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加响应拦截器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 2xx 范围内的状态码都会触发该函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 对响应数据做点什么 例如：直接返回服务器响应结果对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>data</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 超出 2xx 范围的状态码都会触发该函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 对响应错误做点什么 例如：统一对 401 身份验证失败情况做出处理</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 使用？链式调用如果前端有一个不满足条件则不调用后面的函数防止异常</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>error<span class=\"token operator\">?.</span>response<span class=\"token operator\">?.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">401</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'身份验证失败，请重新登录'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//token 不正确或者过期则删除当前对应的 token</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 跳转至登录页面重新登录</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'../login/index.html'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>config 是响应回来的 axios 数据对象，相当于 result 那么 config.data 就获取到了 服务器的 data 数据对象了。将 config.data 获取的数据对象 统一返回为响应结果。这样其它 axios 请求响应接收数据的时候直接调用 result.data.name 就可以取出服务器响应封装的数据对象 data 里面的用户昵称了。</p>\n<h3 id=\"发布文章富文本编辑器\"><a class=\"markdownIt-Anchor\" href=\"#发布文章富文本编辑器\">#</a> 发布文章 — 富文本编辑器</h3>\n<p><strong>富文本</strong>：带样式，多格式的文本，在前端一般使用标签配合内联式实现</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151440229.png\" alt=\"image-20230815144009765\"></p>\n<p><strong>目标</strong>：发布文章页，富文本编辑器的集成</p>\n<p><strong>使用</strong>：wangEditor 插件 <a href=\"https://www.wangeditor.com/v5/getting-started.html\">点击查看文档</a></p>\n<p><strong>步骤</strong>：参考文档</p>\n<ol>\n<li>\n<p>引入 CSS 定义样式</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">&lt;link href=\"https://unpkg.com/@wangeditor/editor@latest/dist/css/style.css\" rel=\"stylesheet\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;style></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  #editor—wrapper</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #ccc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 100<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 按需定义 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token selector\">#toolbar-container</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">border-bottom</span><span class=\"token punctuation\">:</span> 1px solid #ccc<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token selector\">#editor-container</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&lt;/style></pre></td></tr></table></figure></li>\n<li>\n<p>定义 HTML 结构</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>editor—wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toolbar-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 工具栏 --></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>editor-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 编辑器 --></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>引入 JS 创建编辑器</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://unpkg.com/@wangeditor/editor@latest/dist/index.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> createEditor<span class=\"token punctuation\">,</span> createToolbar <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>wangEditor</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> editorConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">placeholder</span><span class=\"token operator\">:</span> <span class=\"token string\">'Type here...'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">editor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> editor<span class=\"token punctuation\">.</span><span class=\"token function\">getHtml</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'editor content'</span><span class=\"token punctuation\">,</span> html<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 也可以同步到 &lt;textarea></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">const</span> editor <span class=\"token operator\">=</span> <span class=\"token function\">createEditor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token literal-property property\">selector</span><span class=\"token operator\">:</span> <span class=\"token string\">'#editor-container'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token literal-property property\">html</span><span class=\"token operator\">:</span> <span class=\"token string\">'&lt;p>&lt;br>&lt;/p>'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token literal-property property\">config</span><span class=\"token operator\">:</span> editorConfig<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// or 'simple'</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">const</span> toolbarConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">const</span> toolbar <span class=\"token operator\">=</span> <span class=\"token function\">createToolbar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    editor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token literal-property property\">selector</span><span class=\"token operator\">:</span> <span class=\"token string\">'#toolbar-container'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token literal-property property\">config</span><span class=\"token operator\">:</span> toolbarConfig<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// or 'simple'</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p>监听内容改变，保存在隐藏文本域 (便于后期收集)</p>\n</li>\n</ol>\n<p>结果：</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308170737626.png\" alt=\"image-20230815150023155\"></p>\n<p>使用 npm 安装到本地的使用方式：</p>\n",
            "tags": [
                "计算机学科",
                "web",
                "代码经验",
                "前后端交互",
                "axios"
            ]
        }
    ]
}