{
    "version": "https://jsonfeed.org/version/1",
    "title": "homepage • All posts by \"jsr303\" tag",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io/homepage",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/java/spring/springboot/%E6%95%B4%E5%90%88jar%E5%8C%85/JSR303%E6%A0%A1%E9%AA%8C/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/java/spring/springboot/%E6%95%B4%E5%90%88jar%E5%8C%85/JSR303%E6%A0%A1%E9%AA%8C/",
            "title": "JSR303校验",
            "date_published": "2024-04-02T06:23:30.796Z",
            "content_html": "<h1 id=\"一-jsr303校验\"><a class=\"markdownIt-Anchor\" href=\"#一-jsr303校验\">#</a> 一、JSR303 校验</h1>\n<h2 id=\"11-统一校验的需求\"><a class=\"markdownIt-Anchor\" href=\"#11-统一校验的需求\">#</a> 1.1、统一校验的需求</h2>\n<p>前端请求后端接口传输参数，是在 controller 中校验还是在 service 中校验</p>\n<p>答案是都需要校验，只是分工不同</p>\n<p>controller 中校验请求参数的合法性，包括：必填项校验，数据格式校验，比如：是否符合一定的日期格式，等。</p>\n<p>service 中要校验的是业务规则相关的内容，比如：课程已经审核通过所以提交失败</p>\n<p>service 中根据业务规则去校验不方便写成通用代码，controller 中则可以将校验代码的代码写成通用代码</p>\n<p>早在 JavaEE6 规范中就定义了参数校验的规范，它就是 JSR-303，它定义了 Bean Validation，即对 bean 属性进行校验</p>\n<p>SpringBoot 提供了 JSR-303 的支持，它就是 spring-boot-starter-validation，它的底层使用 Hibernate Validator，Hibernate Validator 是 Bean Validation 的参考实现</p>\n<p>所以，我们准备在 Controller 层使用 spring-boot-starter-validation 完成对请求参数的基本合法性进行校验</p>\n<h2 id=\"12-统一校验实现\"><a class=\"markdownIt-Anchor\" href=\"#12-统一校验实现\">#</a> 1.2、统一校验实现</h2>\n<p>首先在 Bean 工程添加 spring-boot-starter-validation 的依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-validation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>在 javax.validation.constraints 包下有很多这样的校验注解，直接使用注解定义校验规则即可。</p>\n<p>在实体类的字段上添加注解：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AddCourseDto</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// 不能为空，否则抛出异常</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token annotation punctuation\">@NotEmpty</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"新增课程名称不能为空\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token annotation punctuation\">@NotEmpty</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"修改课程名称不能为空\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token annotation punctuation\">@NotEmpty</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"适用人群不能为空\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token annotation punctuation\">@Size</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"适用人群内容过少\"</span><span class=\"token punctuation\">,</span>min <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> users<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token comment\">//message 异常信息，min 最小值，不能小于 10 否则抛出异常</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token annotation punctuation\">@Size</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"课程描述内容过少\"</span><span class=\"token punctuation\">,</span>min <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pic<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token annotation punctuation\">@NotEmpty</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"收费规则不能为空\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> charge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 controller 层的接口的参数列表中添加注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用 @Validated 来激活 Validation 框架进行统一校验</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"course\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">CourseBaseInfoDto</span> <span class=\"token function\">createCourseBase</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token annotation punctuation\">@Validated</span> <span class=\"token class-name\">AddCourseDto</span> addCourseDto<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 用户登录后会获取它的机构 id</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token class-name\">Long</span> companyId <span class=\"token operator\">=</span> <span class=\"token number\">1232141425L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">return</span> courseBaseInfoService<span class=\"token punctuation\">.</span><span class=\"token function\">createCourseBase</span><span class=\"token punctuation\">(</span>companyId<span class=\"token punctuation\">,</span> addCourseDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 controller 层进行了统一校验后那么就不需要在 service 层进行校验了，如果有校验的代码可以注释掉了，没用了</p>\n<p>通过 HTTPClient 进行测试：</p>\n<p>这里故意不添加 name 的值引出一个异常看看结果</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>### 新增课程</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>POST /content/course</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/json</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token application-json\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">\"charge\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"201001\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token property\">\"pic\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dkxdkx\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token property\">\"users\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"初级人员\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Java网络编程高级\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></span></pre></td></tr></table></figure><p>HTTPClient 结果如下：</p>\n<p>前端需要获取到的异常信息并不是如下的：执行过程异常，请重试，这是怎么回事呢？</p>\n<p>原因：它报异常后由于异常的类型并不是我们系统自定义异常类型所以走了捕获 Exception 异常的函数了，我们需要对这个 JSR303 框架的异常类型进行解析然后返回给前端看。</p>\n<pre><code>HTTP/1.1 500 \nContent-Type: application/json\nTransfer-Encoding: chunked\nDate: Sat, 28 Oct 2023 09:06:39 GMT\nConnection: close\n\n&#123;\n  &quot;errMessage&quot;: &quot;执行过程异常, 请重试&quot;\n&#125;\nResponse file saved.\n&gt; 2023-10-28T170639.500.json\n</code></pre>\n<p>服务的异常信息如下：</p>\n<pre><code>c.x.b.exception.GlobalExceptionHandler   : 系统异常 Validation failed for argument [0] in public com.xuecheng.content.model.dto.CourseBaseInfoDto [NotEmpty.addCourseDto.name,NotEmpty.name,NotEmpty.java.lang.String,NotEmpty];  [addCourseDto.name,name]; arguments []; default message [name]]; default message [新增课程名称不能为空]] [Field error in object 'addCourseDto' on field 'name': rejected value []; codes [NotEmpty.addCourseDto.name,NotEmpty.name,NotEmpty.java.lang.String,NotEmpty];  [addCourseDto.name,name]; arguments []; default message [name]]; default message [修改课程名称不能为空]] \n\n[NotEmpty.addCourseDto.name,NotEmpty.name,NotEmpty.java.lang.String,NotEmpty]; [addCourseDto.name,name]; arguments []; default message [name]]; default message [新增课程名称不能为空]] [Field error in object 'addCourseDto' on field 'name': rejected value []; codes [NotEmpty.addCourseDto.name,NotEmpty.name,NotEmpty.java.lang.String,NotEmpty];  [addCourseDto.name,name]; arguments []; default message [name]]; default message [修改课程名称不能为空]] \n</code></pre>\n<p>报出的异常信息类型为：MethodArgumentNotValidException ，那么我们需要在 GlobalExceptionHanlder 异常捕获类中进行解析</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 指定异常的类型来进行捕获然后处理</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodArgumentNotValidException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTERNAL_SERVER_ERROR</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">RestErrorResponse</span> <span class=\"token function\">exception</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodArgumentNotValidException</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 获取校验框架的异常</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token class-name\">BindingResult</span> bindingResult <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getBindingResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 存储错误信息的集合</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> errorList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">// 解析字段异常</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   bindingResult<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      errorList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\">// 将错误信息进行拼接</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token class-name\">String</span> joinError <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>errorList<span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">// 记录异常日志</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"系统异常 &#123;&#125;\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> joinError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token comment\">// 解析出异常信息</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestErrorResponse</span><span class=\"token punctuation\">(</span>joinError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 HTTPClient 进行测试</p>\n<p>可以看到 debug 抛出异常就会被这个解析 JSR303 框架的函数捕获到然后进行解析返回给前端看</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310281723949.png\" alt=\"image-20231028172316867\"></p>\n<p>HTTPClient 结果如下：</p>\n<pre><code>HTTP/1.1 500 \nContent-Type: application/json\nTransfer-Encoding: chunked\nDate: Sat, 28 Oct 2023 09:24:21 GMT\nConnection: close\n\n&#123;\n  &quot;errMessage&quot;: &quot;修改课程名称不能为空,新增课程名称不能为空&quot;\n&#125;\nResponse file saved.\n&gt; 2023-10-28T172421.500.json\n</code></pre>\n<p>idea 服务信息如下：</p>\n<pre><code>2023-10-28 17:24:17.464 ERROR 17500 --- [io-63040-exec-1] c.x.b.exception.GlobalExceptionHandler   : 系统异常 Validation failed for argument [0] in public com.xuecheng.content.model.dto.CourseBaseInfoDto com.xuecheng.content.api.CourseBaseInfoController.createCourseBase(com.xuecheng.content.model.dto.AddCourseDto) with 2 errors: [Field error in object 'addCourseDto' on field 'name': rejected value []; codes [NotEmpty.addCourseDto.name,NotEmpty.name,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [addCourseDto.name,name]; arguments []; default message [name]]; default message [修改课程名称不能为空]] [Field error in object 'addCourseDto' on field 'name': rejected value []; codes [NotEmpty.addCourseDto.name,NotEmpty.name,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [addCourseDto.name,name]; arguments []; default message [name]]; default message [新增课程名称不能为空]] \n</code></pre>\n<p>但是有一个问题，如果多个接口使用同一个实体类。新增课程用它，修改课程也用它。而新增课程和修改课程校验的数据可能不一样，举个例子：新增课程时，课程名称为空。修改课程时，课程名称有值。这时就会出现问题</p>\n<h2 id=\"13-分组校验\"><a class=\"markdownIt-Anchor\" href=\"#13-分组校验\">#</a> 1.3、分组校验</h2>\n<p>有时候在同一个属性上设置一个校验规则不能满足要求，比如：订单编号由系统生成，在添加订单时要求订单编号为空，在更新订单时要求订单编号不能为空。此时就用到了分组校验。用一个属性定义多个校验规则属于不同的分组，比如：添加订单定义 @NULL 规则则属于 insert 分组，更新订单定义 @NOtEmpty 规则属于 update 分组，insert 和 update 是分组的名称，是可以修改的。</p>\n<p><strong>下边举例说明</strong>：</p>\n<p>我们用 class 类型来表示不同的分组，所以我们定义不同的接口类型 (空接口) 表示不同的分组，由于校验分组是公用的，所以定义在 base 工程中。如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xuecheng<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span>exception<span class=\"token punctuation\">.</span>validation</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Dkx</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @2023/10/2818:27</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @function</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @comment 用于分组校验，定义一些常用的组</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ValidationGroups</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Insert</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Update</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Delete</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后在实体类中的代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 不能为空，否则抛出异常</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@NotEmpty</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"新增课程名称不能为空\"</span><span class=\"token punctuation\">,</span> groups <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ValidationGroups<span class=\"token punctuation\">.</span>Insert</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@NotEmpty</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"修改课程名称不能为空\"</span><span class=\"token punctuation\">,</span> groups <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ValidationGroups<span class=\"token punctuation\">.</span>Update</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>最后在 controller 层的接口参数中来指定这个接口要对这个业务执行什么样的操作即可</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用 @Validated 来激活 Validation 框架进行统一校验</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"course\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">CourseBaseInfoDto</span> <span class=\"token function\">createCourseBase</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token annotation punctuation\">@Validated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ValidationGroups<span class=\"token punctuation\">.</span>Insert</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ValidationGroups<span class=\"token punctuation\">.</span>Update</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">AddCourseDto</span> addCourseDto<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 用户登录后会获取它的机构 id</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token class-name\">Long</span> companyId <span class=\"token operator\">=</span> <span class=\"token number\">1232141425L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">return</span> courseBaseInfoService<span class=\"token punctuation\">.</span><span class=\"token function\">createCourseBase</span><span class=\"token punctuation\">(</span>companyId<span class=\"token punctuation\">,</span> addCourseDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"14-校验规则不满足\"><a class=\"markdownIt-Anchor\" href=\"#14-校验规则不满足\">#</a> 1.4、校验规则不满足？</h2>\n<p>如果 javax.validation.constraints 包下的校验规则满足不了需求怎么办？</p>\n<p>1、手写校验代码</p>\n<p>2、自定义校验规则注解</p>\n",
            "tags": [
                "springboot",
                "计算机学科",
                "整合jar包",
                "JSR303"
            ]
        }
    ]
}