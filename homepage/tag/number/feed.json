{
    "version": "https://jsonfeed.org/version/1",
    "title": "homepage • All posts by \"number\" tag",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io/homepage",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/number/short%E7%9B%B8%E5%8A%A0%E6%8F%90%E5%8D%87%E4%B8%BAint/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/number/short%E7%9B%B8%E5%8A%A0%E6%8F%90%E5%8D%87%E4%B8%BAint/",
            "title": "为什么short相加会自动提升为int？",
            "date_published": "2024-04-02T06:23:31.449Z",
            "content_html": "<h2 id=\"为什么short相加会自动提升为int\"><a class=\"markdownIt-Anchor\" href=\"#为什么short相加会自动提升为int\">#</a> 为什么 short 相加会自动提升为 int？</h2>\n<p>Java 中进行二元与运算类型的提升规则</p>\n<p>整数运算：</p>\n<p>如果两个操作数有一个为 long，则结果也为 long；</p>\n<p>没有 long 时，结果为 int，即使操作数全为 short，byte，结果也是 int。</p>\n<p>浮点数运算：</p>\n<p>如果两个操作数有一个为 double，则结果为 double；</p>\n<p>只有两个操作数都是 float，则结果才是 float。</p>\n<p>注意：int 与 float 运算，结果为 float。</p>\n<p>为什么两个 short 类型相加会自动提升为 int？</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081432091.png\" alt=\"image-20230618093102338\"></p>\n<p>s1+s2 系统会自动将它们提升为 int 再运算，结果为 int 类型，赋给 short 类型，编译报错；s3 = s2 + 1 也是同样的原因；s3 = 4 + 45，系统先计算 4 + 45 = 50，也就是变为 s3 = 50,50 在 short 表示的范围内自动转型为 short，但是为什么 java 在两个 short 型运算时自动提升为 int，即使它们没有超过表示范围？</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081432680.png\" alt=\"image-20230618093321379\"></p>\n<p>使用较小类型运算没有性能优势，消除较小的类型使得字节码更简单，并且使得具有未来扩展空间的完整指令集仍然适合单个字节码中的操作码，因此，较小的类型通常被视为 Java 设计中的二等公民，在各个步骤转换为 int，因为这简化了一些事情。</p>\n<p>Why does the Java API use int instead of short or byte?</p>\n<p>为什么 Java API 使用 int 而不是 short 或 byte？</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081432375.png\" alt=\"image-20230618093548011\"></p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081432055.png\" alt=\"image-20230618093559929\"></p>\n<p>答案可能只与 Java 虚拟机指令集有关。较小的类型 (byte，short) 基本上只用于数组。</p>\n<p>If each typed instruction supported all of the Java Virtual Machine’s run-time data types, there would be more instructions than could be represented in a byte。</p>\n<p>为较小的类型引入专用的算术逻辑单元不值得付出努力：它需要额外的晶体管，但它仍然只能在一个时钟周期内执行一次加法。 JVM 设计时的主流架构是 32 位，适合 32 位 int。</p>\n",
            "tags": [
                "知识点",
                "number"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/number/float%E4%B8%8Edouble%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/number/float%E4%B8%8Edouble%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "title": "基本数据类型float和double的区别",
            "date_published": "2024-04-02T06:23:31.445Z",
            "content_html": "<h2 id=\"基本数据类型float和double的区别\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型float和double的区别\">#</a> 基本数据类型 float 和 double 的区别</h2>\n<p><mark>float</mark>：单精度浮点数</p>\n<p><mark>double</mark>：双精度浮点数<sup>默认</sup></p>\n<h3 id=\"两者的主要区别如下\"><a class=\"markdownIt-Anchor\" href=\"#两者的主要区别如下\">#</a> 两者的主要区别如下：</h3>\n<ol>\n<li>\n<p><strong>在内存中占有的字节数不同</strong></p>\n<p>单精度浮点数在机内存占 4 个字节</p>\n<p>双精度浮点数在机内存占 8 个字节</p>\n</li>\n<li>\n<p><strong>有效数字位数不同</strong></p>\n<p>单精度浮点数有效数字 8 位</p>\n<p>双精度浮点数有效数字 16 位</p>\n</li>\n<li>\n<p><strong>数值取值范围</strong></p>\n<p>单精度浮点数的表示范围：-3.40E + 38 ~ 3.40E + 38</p>\n<p>双精度浮点数的表示范围：-1.79E + 308 ~ -1.79E + 308</p>\n</li>\n<li>\n<p><strong>在程序中处理速度不同</strong></p>\n<p>一般来说，CPU 处理单精度浮点数的速度比处理双精度浮点数快</p>\n<p>如果不声明，默认小数位 Double 类型，所以如果要用 Float 的话，必须进行强转。</p>\n<p>例如：float a = 1.3; 会编译报错，正确写法：float a = (Float) 1.3; 或者 float a = 1.3f;</p>\n<p>(f 或 F 不区别大小写)</p>\n<p><font style=\"color:red\">注意</font>：float 是 8 位有效数字，第 7 位数字将会四舍五入。</p>\n<h4 id=\"面试题\"><a class=\"markdownIt-Anchor\" href=\"#面试题\">#</a> 面试题：</h4>\n<ol>\n<li>\n<p>Java 中 3 * 0.1 == 0.3 将会返回什么？ true 还是 false</p>\n<p>答：false，因为浮点数不能完全精确的表示出来，一般会损失精度</p>\n</li>\n<li>\n<p>Java 中 float f = 3.4; 是否正确</p>\n<p>答：不正确 3.4 是双精度数，将双精度型 (double) 赋值给浮点型 (float) 属于向下转型会造成精度损失，因此需要强制类型转换 float f = (float) 3.4 或者写成 float f = 3.4f;</p>\n</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "知识点",
                "number"
            ]
        }
    ]
}