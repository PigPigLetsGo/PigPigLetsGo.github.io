<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>homepage • Posts by &#34;number&#34; tag</title>
        <link>https://pigpigletsgo.github.io/homepage</link>
        <description>欢迎来我的博客空间</description>
        <language>zh-CN</language>
        <pubDate>Wed, 24 Jan 2024 18:48:46 +0800</pubDate>
        <lastBuildDate>Wed, 24 Jan 2024 18:48:46 +0800</lastBuildDate>
        <category>mybatis</category>
        <category>问题总汇</category>
        <category>linux</category>
        <category>jdk版本问题</category>
        <category>springboot</category>
        <category>读取配置文件</category>
        <category>报错</category>
        <category>编码问题</category>
        <category>JdbcTemplate</category>
        <category>MyBatisPlus</category>
        <category>版本问题</category>
        <category>Jwt</category>
        <category>nginx</category>
        <category>java</category>
        <category>vim</category>
        <category>输入法</category>
        <category>Swing</category>
        <category>hexo</category>
        <category>shoka</category>
        <category>计算机底层</category>
        <category>english</category>
        <category>math</category>
        <category>算法</category>
        <category>计算机学科</category>
        <category>C</category>
        <category>介绍</category>
        <category>基础</category>
        <category>mysql</category>
        <category>git</category>
        <category>web</category>
        <category>坑点</category>
        <category>tools</category>
        <category>idea</category>
        <category>项目</category>
        <category>nodeJs</category>
        <category>vscode</category>
        <category>windows</category>
        <category>密码管理</category>
        <category>database</category>
        <category>JDBC</category>
        <category>mongodb</category>
        <category>redis</category>
        <category>navicat</category>
        <category>集群</category>
        <category>知识点</category>
        <category>代码经验</category>
        <category>jvm</category>
        <category>config配置类</category>
        <category>数据结构与算法</category>
        <category>图</category>
        <category>递归</category>
        <category>链表</category>
        <category>队列</category>
        <category>栈</category>
        <category>数组</category>
        <category>多路查找树</category>
        <category>排序</category>
        <category>查找</category>
        <category>哈希表</category>
        <category>树结构</category>
        <category>程序员常用的10中算法</category>
        <category>maven</category>
        <category>编程题</category>
        <category>动态规划</category>
        <category>贪心算法</category>
        <category>二叉树</category>
        <category>层序遍历</category>
        <category>后序遍历</category>
        <category>广度优先搜索</category>
        <category>还原二叉树</category>
        <category>双指针</category>
        <category>快慢指针</category>
        <category>分而治之</category>
        <category>对称二叉树</category>
        <category>堆</category>
        <category>小顶堆</category>
        <category>单调栈</category>
        <category>大顶堆</category>
        <category>逆波兰表达式</category>
        <category>servlet</category>
        <category>spring</category>
        <category>工具类</category>
        <category>开源项目框架</category>
        <category>案例Demo</category>
        <category>菜单数据结构</category>
        <category>网络编程</category>
        <category>分页</category>
        <category>多线程</category>
        <category>lombok</category>
        <category>爬虫</category>
        <category>API的区别</category>
        <category>第三方库</category>
        <category>Minio</category>
        <category>Thymeleaf</category>
        <category>hutool</category>
        <category>七牛云</category>
        <category>设计模式</category>
        <category>vue3</category>
        <category>websocket</category>
        <category>前后端交互</category>
        <category>数据格式</category>
        <category>axios</category>
        <category>mybatisplus-join</category>
        <category>ORM</category>
        <category>二叉树搜索树</category>
        <category>avl树</category>
        <category>二叉树的遍历</category>
        <category>优先级队列</category>
        <category>完全二叉树</category>
        <category>heapify</category>
        <category>堆排序</category>
        <category>动态数组</category>
        <category>红黑树</category>
        <category>阻塞队列</category>
        <category>进阶</category>
        <category>SSM</category>
        <category>springcloud</category>
        <category>springmvc</category>
        <category>springsecurity</category>
        <category>JWT</category>
        <category>MD5</category>
        <category>thymeleaf</category>
        <category>源码</category>
        <category>拦截器</category>
        <category>整合jar包</category>
        <category>Junit</category>
        <category>IO</category>
        <category>String</category>
        <category>number</category>
        <category>lambda</category>
        <category>http</category>
        <category>stream流</category>
        <category>对象</category>
        <category>泛型</category>
        <category>集合</category>
        <category>js</category>
        <category>jquery</category>
        <category>Knife4j</category>
        <category>JSR303</category>
        <category>devtools</category>
        <category>Docker</category>
        <category>Elasticsearch</category>
        <category>Nacos</category>
        <category>RabbitMQ</category>
        <category>部署</category>
        <category>springboot高级</category>
        <category>OpenResty</category>
        <category>Canal</category>
        <category>Seata</category>
        <category>Sentinel</category>
        <category>持久化</category>
        <item>
            <guid isPermalink="true">https://pigpigletsgo.github.io/homepage/2024/01/24/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/number/float%E4%B8%8Edouble%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
            <title>基本数据类型float和double的区别</title>
            <link>https://pigpigletsgo.github.io/homepage/2024/01/24/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/number/float%E4%B8%8Edouble%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
            <category>知识点</category>
            <category>number</category>
            <pubDate>Wed, 24 Jan 2024 18:48:46 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;基本数据类型float和double的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本数据类型float和double的区别&#34;&gt;#&lt;/a&gt; 基本数据类型 float 和 double 的区别&lt;/h2&gt;
&lt;p&gt;&lt;mark&gt;float&lt;/mark&gt;：单精度浮点数&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;double&lt;/mark&gt;：双精度浮点数&lt;sup&gt;默认&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id=&#34;两者的主要区别如下&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两者的主要区别如下&#34;&gt;#&lt;/a&gt; 两者的主要区别如下：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在内存中占有的字节数不同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;单精度浮点数在机内存占 4 个字节&lt;/p&gt;
&lt;p&gt;双精度浮点数在机内存占 8 个字节&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;有效数字位数不同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;单精度浮点数有效数字 8 位&lt;/p&gt;
&lt;p&gt;双精度浮点数有效数字 16 位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数值取值范围&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;单精度浮点数的表示范围：-3.40E + 38 ~ 3.40E + 38&lt;/p&gt;
&lt;p&gt;双精度浮点数的表示范围：-1.79E + 308 ~ -1.79E + 308&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在程序中处理速度不同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般来说，CPU 处理单精度浮点数的速度比处理双精度浮点数快&lt;/p&gt;
&lt;p&gt;如果不声明，默认小数位 Double 类型，所以如果要用 Float 的话，必须进行强转。&lt;/p&gt;
&lt;p&gt;例如：float a = 1.3; 会编译报错，正确写法：float a = (Float) 1.3; 或者 float a = 1.3f;&lt;/p&gt;
&lt;p&gt;(f 或 F 不区别大小写)&lt;/p&gt;
&lt;p&gt;&amp;lt;font style=&amp;quot;color:red&amp;quot;&amp;gt; 注意 &amp;lt;/font&amp;gt;：float 是 8 位有效数字，第 7 位数字将会四舍五入。&lt;/p&gt;
&lt;h4 id=&#34;面试题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试题&#34;&gt;#&lt;/a&gt; 面试题：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Java 中 3 * 0.1 == 0.3 将会返回什么？ true 还是 false&lt;/p&gt;
&lt;p&gt;答：false，因为浮点数不能完全精确的表示出来，一般会损失精度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java 中 float f = 3.4; 是否正确&lt;/p&gt;
&lt;p&gt;答：不正确 3.4 是双精度数，将双精度型 (double) 赋值给浮点型 (float) 属于向下转型会造成精度损失，因此需要强制类型转换 float f = (float) 3.4 或者写成 float f = 3.4f;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://pigpigletsgo.github.io/homepage/2024/01/24/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/number/short%E7%9B%B8%E5%8A%A0%E6%8F%90%E5%8D%87%E4%B8%BAint/</guid>
            <title>为什么short相加会自动提升为int？</title>
            <link>https://pigpigletsgo.github.io/homepage/2024/01/24/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/number/short%E7%9B%B8%E5%8A%A0%E6%8F%90%E5%8D%87%E4%B8%BAint/</link>
            <category>知识点</category>
            <category>number</category>
            <pubDate>Wed, 24 Jan 2024 18:48:46 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;为什么short相加会自动提升为int&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么short相加会自动提升为int&#34;&gt;#&lt;/a&gt; 为什么 short 相加会自动提升为 int？&lt;/h2&gt;
&lt;p&gt;Java 中进行二元与运算类型的提升规则&lt;/p&gt;
&lt;p&gt;整数运算：&lt;/p&gt;
&lt;p&gt;如果两个操作数有一个为 long，则结果也为 long；&lt;/p&gt;
&lt;p&gt;没有 long 时，结果为 int，即使操作数全为 short，byte，结果也是 int。&lt;/p&gt;
&lt;p&gt;浮点数运算：&lt;/p&gt;
&lt;p&gt;如果两个操作数有一个为 double，则结果为 double；&lt;/p&gt;
&lt;p&gt;只有两个操作数都是 float，则结果才是 float。&lt;/p&gt;
&lt;p&gt;注意：int 与 float 运算，结果为 float。&lt;/p&gt;
&lt;p&gt;为什么两个 short 类型相加会自动提升为 int？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081432091.png&#34; alt=&#34;image-20230618093102338&#34; /&gt;&lt;/p&gt;
&lt;p&gt;s1+s2 系统会自动将它们提升为 int 再运算，结果为 int 类型，赋给 short 类型，编译报错；s3 = s2 + 1 也是同样的原因；s3 = 4 + 45，系统先计算 4 + 45 = 50，也就是变为 s3 = 50,50 在 short 表示的范围内自动转型为 short，但是为什么 java 在两个 short 型运算时自动提升为 int，即使它们没有超过表示范围？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081432680.png&#34; alt=&#34;image-20230618093321379&#34; /&gt;&lt;/p&gt;
&lt;p&gt;使用较小类型运算没有性能优势，消除较小的类型使得字节码更简单，并且使得具有未来扩展空间的完整指令集仍然适合单个字节码中的操作码，因此，较小的类型通常被视为 Java 设计中的二等公民，在各个步骤转换为 int，因为这简化了一些事情。&lt;/p&gt;
&lt;p&gt;Why does the Java API use int instead of short or byte?&lt;/p&gt;
&lt;p&gt;为什么 Java API 使用 int 而不是 short 或 byte？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081432375.png&#34; alt=&#34;image-20230618093548011&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081432055.png&#34; alt=&#34;image-20230618093559929&#34; /&gt;&lt;/p&gt;
&lt;p&gt;答案可能只与 Java 虚拟机指令集有关。较小的类型 (byte，short) 基本上只用于数组。&lt;/p&gt;
&lt;p&gt;If each typed instruction supported all of the Java Virtual Machine&#39;s run-time data types, there would be more instructions than could be represented in a byte。&lt;/p&gt;
&lt;p&gt;为较小的类型引入专用的算术逻辑单元不值得付出努力：它需要额外的晶体管，但它仍然只能在一个时钟周期内执行一次加法。 JVM 设计时的主流架构是 32 位，适合 32 位 int。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
