{
    "version": "https://jsonfeed.org/version/1",
    "title": "homepage • All posts by \"orm\" tag",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io/homepage",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/database/mybatis/orm/orm/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/database/mybatis/orm/orm/",
            "title": "MyBatis-ORM",
            "date_published": "2024-04-02T06:23:30.093Z",
            "content_html": "<h1 id=\"mybatis什么是orm对象关系映射\"><a class=\"markdownIt-Anchor\" href=\"#mybatis什么是orm对象关系映射\">#</a> MyBatis 什么是 ORM (对象关系映射)</h1>\n<h2 id=\"一-什么是orm\"><a class=\"markdownIt-Anchor\" href=\"#一-什么是orm\">#</a> 一，什么是 ORM</h2>\n<p>对象关系映射 (Object Relational Mapping), 简称 ORM , 模式是一种<mark>为了解决面向对象与关系数据库存在的互补匹配的现象技术</mark></p>\n<hr>\n<p>怎么理解上面的那句话呢？</p>\n<p>在 Java 中我们使用 String 表示字符串，而 Oracle 中可以使用 varchar2,MySQL 中可以使用 varchar,SQLserver 可以使用 nvarchar, 完成对象与<font style=\"color:red\"><strong>关系数据库</strong></font>之间的映射时，我们往往需要手动转换，如下:</p>\n<p>代码 1:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将执行的 sql</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select id, name, password from user\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建命令对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>preparedStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 执行并获得结果集</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>resultSet <span class=\"token operator\">=</span> preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 遍历结果集，将数据库中的数据转换成 Java 中的对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token class-name\">User</span> entity<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token class-name\">Users</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>很明显，这些代码是重复的且不好维护的，ORM 的出现是的上述的过程可以自动化</p>\n<h2 id=\"二-mybatis中orm的体现\"><a class=\"markdownIt-Anchor\" href=\"#二-mybatis中orm的体现\">#</a> 二，MyBatis 中 ORM 的体现</h2>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-03-18-20-17-19.png\" alt=\"image_2023-03-18-20-17-19\"></p>\n<p>简单的说，<mark>ORM 是通过使用描述对象和数据之间映射的元数据，将程序中的对象自动持久化到关系数据库中</mark></p>\n<hr>\n<p>在 MyBatis 中体现就是我们常说的 &quot;结果集映射&quot;, 可以说是一种半自动化的 ORM, 因为必须要自己写 sql</p>\n<p>代码 2:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>select id<span class=\"token operator\">=</span><span class=\"token string\">\"selUserByID\"</span> resultType<span class=\"token operator\">=</span><span class=\"token string\">\"stdpei.pojo.User\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        select id <span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span> passwd as pwd from `user` </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>select<span class=\"token operator\">></span></pre></td></tr></table></figure><p><font style=\"color:red\"><strong>代码 2</strong></font>就可以取代<font style=\"color:red\"><strong>代码 1</strong></font>, 这就是 MyBatis 给我们提供的 ORM, 不需要我们去写结果集的映射，当然要保证 User 中的属性名和 user 中的字段名相同，才可以 [^ 不相同也有其解决方式]</p>\n<hr>\n<p>由于 ORM 可以<strong>自动对 Entity 对象与数据库中的 Table 进行</strong><font style=\"color:red\"><strong>字段</strong></font><strong>与</strong><font style=\"color:red\"><strong>属性的映射</strong></font>, 所以我们实际可能已经<strong>不需要一个专用的，庞大的数据访问层</strong></p>\n<p>ORM 提供了对数据库的映射，不用 sql 直接编码，<strong> 能够像操作对象一样从数据库获取数据</strong></p>\n<h2 id=\"三-核心原则\"><a class=\"markdownIt-Anchor\" href=\"#三-核心原则\">#</a> 三，核心原则</h2>\n<ul>\n<li>\n<p><strong>简单：以最基本的形式建模数据</strong></p>\n</li>\n<li>\n<p><strong>传达性：数据库结构被任何人都能理解的语言文档化</strong></p>\n</li>\n<li>\n<p><strong>准确性：基于数据模型创建正确标准化了的结构</strong></p>\n</li>\n</ul>\n<h2 id=\"四-orm的优缺点\"><a class=\"markdownIt-Anchor\" href=\"#四-orm的优缺点\">#</a> 四，ORM 的优缺点</h2>\n<ol>\n<li><strong>会牺牲程序的执行效率</strong></li>\n</ol>\n<p>因为 ORM 是在原本的基础上加了一层，数据完全的面向对象，我们都知道，实现业务需求所经历的层数越多，那么效率就往往越低</p>\n<ol start=\"2\">\n<li><strong>固定思维模式</strong></li>\n</ol>\n<p>对于 &quot;框架&quot; 而言，往往都是 &quot;约定大于配置&quot;, 因为是通过配置文件实现的业务逻辑，所以个性化操作往往很受限制，我们要遵循设计者的思维模式</p>\n<ol start=\"3\">\n<li><strong>存在一般都有性能问题</strong></li>\n</ol>\n<p>在对对象做持久化时，ORM 一般会持久化所有的属性，如果用上了 ORM, 程序员很有可能将全部的数据提取到内存对象中，然后再进行过滤和加工处理，这样就容易产生性能问题</p>\n<h2 id=\"五-总结\"><a class=\"markdownIt-Anchor\" href=\"#五-总结\">#</a> 五，总结</h2>\n<p>数据库中的一张表，往往对应着面向对象中的一个实体类.</p>\n<p>在没有 ORM 时，我们需要手动写一些数据库中的字段与实体类中的属性的映射关系，这个操作是重复且不好维护的.</p>\n<p>ORM 出现之后，我们就省去了手动写映射关系的代码，我们只需要注重实体类以及 sql 语句的即可.</p>\n",
            "tags": [
                "mybatis",
                "计算机学科",
                "database",
                "ORM"
            ]
        }
    ]
}