<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>homepage • Posts by &#34;orm&#34; tag</title>
        <link>https://pigpigletsgo.github.io/homepage</link>
        <description>欢迎来我的博客空间</description>
        <language>zh-CN</language>
        <pubDate>Tue, 02 Apr 2024 14:23:30 +0800</pubDate>
        <lastBuildDate>Tue, 02 Apr 2024 14:23:30 +0800</lastBuildDate>
        <category>mybatis</category>
        <category>问题总汇</category>
        <category>linux</category>
        <category>jdk版本问题</category>
        <category>报错</category>
        <category>编码问题</category>
        <category>springboot</category>
        <category>读取配置文件</category>
        <category>JdbcTemplate</category>
        <category>Jwt</category>
        <category>MyBatisPlus</category>
        <category>版本问题</category>
        <category>nginx</category>
        <category>Swing</category>
        <category>java</category>
        <category>vim</category>
        <category>输入法</category>
        <category>hexo</category>
        <category>shoka</category>
        <category>计算机底层</category>
        <category>math</category>
        <category>算法</category>
        <category>english</category>
        <category>计算机学科</category>
        <category>C</category>
        <category>介绍</category>
        <category>基础</category>
        <category>mysql</category>
        <category>git</category>
        <category>坑点</category>
        <category>web</category>
        <category>tools</category>
        <category>windows</category>
        <category>nodeJs</category>
        <category>idea</category>
        <category>项目</category>
        <category>vscode</category>
        <category>密码管理</category>
        <category>jvm</category>
        <category>config配置类</category>
        <category>maven</category>
        <category>编程题</category>
        <category>动态规划</category>
        <category>二叉树</category>
        <category>层序遍历</category>
        <category>贪心算法</category>
        <category>后序遍历</category>
        <category>广度优先搜索</category>
        <category>还原二叉树</category>
        <category>递归</category>
        <category>双指针</category>
        <category>快慢指针</category>
        <category>分而治之</category>
        <category>对称二叉树</category>
        <category>单调栈</category>
        <category>堆</category>
        <category>小顶堆</category>
        <category>大顶堆</category>
        <category>栈</category>
        <category>逆波兰表达式</category>
        <category>数据结构与算法</category>
        <category>图</category>
        <category>多路查找树</category>
        <category>链表</category>
        <category>队列</category>
        <category>数组</category>
        <category>排序</category>
        <category>查找</category>
        <category>哈希表</category>
        <category>树结构</category>
        <category>程序员常用的10中算法</category>
        <category>servlet</category>
        <category>spring</category>
        <category>工具类</category>
        <category>开源项目框架</category>
        <category>案例Demo</category>
        <category>菜单数据结构</category>
        <category>网络编程</category>
        <category>分页</category>
        <category>lombok</category>
        <category>多线程</category>
        <category>第三方库</category>
        <category>Minio</category>
        <category>hutool</category>
        <category>Thymeleaf</category>
        <category>爬虫</category>
        <category>七牛云</category>
        <category>知识点</category>
        <category>API的区别</category>
        <category>设计模式</category>
        <category>database</category>
        <category>JDBC</category>
        <category>mongodb</category>
        <category>redis</category>
        <category>集群</category>
        <category>navicat</category>
        <category>代码经验</category>
        <category>vue3</category>
        <category>前后端交互</category>
        <category>websocket</category>
        <category>数据格式</category>
        <category>axios</category>
        <category>进阶</category>
        <category>avl树</category>
        <category>二叉树搜索树</category>
        <category>二叉树的遍历</category>
        <category>优先级队列</category>
        <category>完全二叉树</category>
        <category>heapify</category>
        <category>堆排序</category>
        <category>动态数组</category>
        <category>红黑树</category>
        <category>阻塞队列</category>
        <category>SSM</category>
        <category>springmvc</category>
        <category>springsecurity</category>
        <category>JWT</category>
        <category>MD5</category>
        <category>thymeleaf</category>
        <category>springcloud</category>
        <category>源码</category>
        <category>整合jar包</category>
        <category>Junit</category>
        <category>拦截器</category>
        <category>IO</category>
        <category>String</category>
        <category>http</category>
        <category>number</category>
        <category>stream流</category>
        <category>lambda</category>
        <category>对象</category>
        <category>泛型</category>
        <category>集合</category>
        <category>mybatisplus-join</category>
        <category>ORM</category>
        <category>js</category>
        <category>jquery</category>
        <category>Knife4j</category>
        <category>devtools</category>
        <category>JSR303</category>
        <category>springboot高级</category>
        <category>Elasticsearch</category>
        <category>Docker</category>
        <category>Nacos</category>
        <category>RabbitMQ</category>
        <category>部署</category>
        <category>OpenResty</category>
        <category>Canal</category>
        <category>Seata</category>
        <category>Sentinel</category>
        <category>持久化</category>
        <item>
            <guid isPermalink="true">https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/database/mybatis/orm/orm/</guid>
            <title>MyBatis-ORM</title>
            <link>https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/database/mybatis/orm/orm/</link>
            <category>mybatis</category>
            <category>计算机学科</category>
            <category>database</category>
            <category>ORM</category>
            <pubDate>Tue, 02 Apr 2024 14:23:30 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;mybatis什么是orm对象关系映射&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mybatis什么是orm对象关系映射&#34;&gt;#&lt;/a&gt; MyBatis 什么是 ORM (对象关系映射)&lt;/h1&gt;
&lt;h2 id=&#34;一-什么是orm&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-什么是orm&#34;&gt;#&lt;/a&gt; 一，什么是 ORM&lt;/h2&gt;
&lt;p&gt;对象关系映射 (Object Relational Mapping), 简称 ORM , 模式是一种&lt;mark&gt;为了解决面向对象与关系数据库存在的互补匹配的现象技术&lt;/mark&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;怎么理解上面的那句话呢？&lt;/p&gt;
&lt;p&gt;在 Java 中我们使用 String 表示字符串，而 Oracle 中可以使用 varchar2,MySQL 中可以使用 varchar,SQLserver 可以使用 nvarchar, 完成对象与&lt;font style=&#34;color:red&#34;&gt;&lt;strong&gt;关系数据库&lt;/strong&gt;&lt;/font&gt;之间的映射时，我们往往需要手动转换，如下:&lt;/p&gt;
&lt;p&gt;代码 1:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 将执行的 sql&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; sql &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;select id, name, password from user&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 创建命令对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;preparedStatement &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; connection&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;prepareStatement&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sql&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 执行并获得结果集&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;resultSet &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; preparedStatement&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;executeQuery&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 遍历结果集，将数据库中的数据转换成 Java 中的对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;resultSet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; resultSet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; resultSet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;id&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; password &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; resultSet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;password&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt; entity&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;password&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token class-name&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;entity&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;很明显，这些代码是重复的且不好维护的，ORM 的出现是的上述的过程可以自动化&lt;/p&gt;
&lt;h2 id=&#34;二-mybatis中orm的体现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-mybatis中orm的体现&#34;&gt;#&lt;/a&gt; 二，MyBatis 中 ORM 的体现&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-03-18-20-17-19.png&#34; alt=&#34;image_2023-03-18-20-17-19&#34;&gt;&lt;/p&gt;
&lt;p&gt;简单的说，&lt;mark&gt;ORM 是通过使用描述对象和数据之间映射的元数据，将程序中的对象自动持久化到关系数据库中&lt;/mark&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在 MyBatis 中体现就是我们常说的 &amp;quot;结果集映射&amp;quot;, 可以说是一种半自动化的 ORM, 因为必须要自己写 sql&lt;/p&gt;
&lt;p&gt;代码 2:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;select id&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;selUserByID&#34;&lt;/span&gt; resultType&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;stdpei.pojo.User&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        select id &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; passwd as pwd from `user` &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;select&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;font style=&#34;color:red&#34;&gt;&lt;strong&gt;代码 2&lt;/strong&gt;&lt;/font&gt;就可以取代&lt;font style=&#34;color:red&#34;&gt;&lt;strong&gt;代码 1&lt;/strong&gt;&lt;/font&gt;, 这就是 MyBatis 给我们提供的 ORM, 不需要我们去写结果集的映射，当然要保证 User 中的属性名和 user 中的字段名相同，才可以 [^ 不相同也有其解决方式]&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;由于 ORM 可以&lt;strong&gt;自动对 Entity 对象与数据库中的 Table 进行&lt;/strong&gt;&lt;font style=&#34;color:red&#34;&gt;&lt;strong&gt;字段&lt;/strong&gt;&lt;/font&gt;&lt;strong&gt;与&lt;/strong&gt;&lt;font style=&#34;color:red&#34;&gt;&lt;strong&gt;属性的映射&lt;/strong&gt;&lt;/font&gt;, 所以我们实际可能已经&lt;strong&gt;不需要一个专用的，庞大的数据访问层&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ORM 提供了对数据库的映射，不用 sql 直接编码，&lt;strong&gt; 能够像操作对象一样从数据库获取数据&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;三-核心原则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-核心原则&#34;&gt;#&lt;/a&gt; 三，核心原则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;简单：以最基本的形式建模数据&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;传达性：数据库结构被任何人都能理解的语言文档化&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;准确性：基于数据模型创建正确标准化了的结构&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;四-orm的优缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-orm的优缺点&#34;&gt;#&lt;/a&gt; 四，ORM 的优缺点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;会牺牲程序的执行效率&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为 ORM 是在原本的基础上加了一层，数据完全的面向对象，我们都知道，实现业务需求所经历的层数越多，那么效率就往往越低&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;固定思维模式&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于 &amp;quot;框架&amp;quot; 而言，往往都是 &amp;quot;约定大于配置&amp;quot;, 因为是通过配置文件实现的业务逻辑，所以个性化操作往往很受限制，我们要遵循设计者的思维模式&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;存在一般都有性能问题&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在对对象做持久化时，ORM 一般会持久化所有的属性，如果用上了 ORM, 程序员很有可能将全部的数据提取到内存对象中，然后再进行过滤和加工处理，这样就容易产生性能问题&lt;/p&gt;
&lt;h2 id=&#34;五-总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-总结&#34;&gt;#&lt;/a&gt; 五，总结&lt;/h2&gt;
&lt;p&gt;数据库中的一张表，往往对应着面向对象中的一个实体类.&lt;/p&gt;
&lt;p&gt;在没有 ORM 时，我们需要手动写一些数据库中的字段与实体类中的属性的映射关系，这个操作是重复且不好维护的.&lt;/p&gt;
&lt;p&gt;ORM 出现之后，我们就省去了手动写映射关系的代码，我们只需要注重实体类以及 sql 语句的即可.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
