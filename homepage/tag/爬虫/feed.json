{
    "version": "https://jsonfeed.org/version/1",
    "title": "homepage • All posts by \"爬虫\" tag",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io/homepage",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/jsoup%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/jsoup%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",
            "title": "jsoup",
            "date_published": "2024-04-02T10:00:51.450Z",
            "content_html": "<h1 id=\"一-jsoup概述\"><a class=\"markdownIt-Anchor\" href=\"#一-jsoup概述\">#</a> 一、jsoup 概述</h1>\n<p>jsoup 是一款基于 Java 的 HTML 解析器，它提供了一套非常省力的 API，不但能直接解析某个 URL 地址、HTML 文本内容，而且还能通过类似于 DOM、CSS 或者 jQuery 的方法来操作数据，所以 jsoup 也可以被当做爬虫工具使用。</p>\n<hr>\n<h1 id=\"二-相关概念简介\"><a class=\"markdownIt-Anchor\" href=\"#二-相关概念简介\">#</a> 二、相关概念简介</h1>\n<ul>\n<li><code>Document</code>  ：文档对象。每份 HTML 页面都是一个文档对象，Document 是 jsoup 体系中最顶层的结构。</li>\n<li><code>Element</code> ：元素对象。一个 Document 中可以着包含着多个 Element 对象，可以使用 Element 对象来遍历节点提取数据或者直接操作 HTML。</li>\n<li><code>Elements</code> ：元素对象集合，类似于 <code>List&lt;Element&gt;</code> 。</li>\n<li><code>Node</code> ：节点对象。标签名称、属性等都是节点对象，节点对象用来存储数据。</li>\n<li><strong>类继承关系</strong>：Document 继承自 Element ，Element 继承自 Node。</li>\n<li><strong>一般执行流程</strong>：先获取 Document 对象，然后获取 Element 对象，最后再通过 Node 对象获取数据。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240308180038864.png\" alt=\"image-20240308180038864\"></p>\n<hr>\n<h1 id=\"三-获取文档document\"><a class=\"markdownIt-Anchor\" href=\"#三-获取文档document\">#</a> 三、获取文档（Document）</h1>\n<blockquote>\n<p>获得文档对象 Document 一共有 4 种方法，分别对应不同的获取方式。</p>\n</blockquote>\n<p>正式开始之前，我们需要导入有关 jar 包。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xml复制代码<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.jsoup<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jsoup<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.15.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>–</p>\n<h4 id=\"31从url中加载文档对象常用\"><a class=\"markdownIt-Anchor\" href=\"#31从url中加载文档对象常用\">#</a> 3.1）从 URL 中加载文档对象（常用）</h4>\n<p>使用  <code>Jsoup.connect(String url).get()</code>  方法获取（只支持 http 和 https 协议）:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java复制代码<span class=\"token class-name\">Document</span> doc <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://csdn.com/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> title <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>connect(String url)</code>  方法创建一个新的 Connection 并通过 <code>.get()</code>  或者 <code>.post()</code>  方法获得数据。如果从该 URL 获取 HTML 时发生错误，便会抛出 IOException，应适当处理。</p>\n<p><code>Connection</code>  接口还提供一个方法链来解决特殊请求，我们可以在发送请求时带上请求的头部参数，具体如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java复制代码<span class=\"token class-name\">Document</span> doc <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://csdn.com\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"query\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">userAgent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mozilla\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>–</p>\n<h4 id=\"32从本地文件中加载文档对象\"><a class=\"markdownIt-Anchor\" href=\"#32从本地文件中加载文档对象\">#</a> 3.2）从本地文件中加载文档对象</h4>\n<p>可以使用静态的 <code>Jsoup.parse(File in, String charsetName)</code>  方法从文件中加载文档。其中 <code>in</code>  表示路径， <code>charsetName</code>  表示编码方式，示例代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java复制代码<span class=\"token class-name\">File</span> input <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/tmp/input.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Document</span> doc <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>–</p>\n<h4 id=\"33从字符串文本中加载文档对象\"><a class=\"markdownIt-Anchor\" href=\"#33从字符串文本中加载文档对象\">#</a> 3.3）从字符串文本中加载文档对象</h4>\n<p>使用静态的 <code>Jsoup.parse(String html)</code>  方法可以从字符串文本中获得文档对象 Document ，示例代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java复制代码<span class=\"token class-name\">String</span> html <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;html>&lt;head>&lt;title>First parse&lt;/title>&lt;/head>\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;body>&lt;p>Parsed HTML into a doc.&lt;/p>&lt;/body>&lt;/html>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Document</span> doc <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>–</p>\n<h4 id=\"34从body片断中获取文档对象\"><a class=\"markdownIt-Anchor\" href=\"#34从body片断中获取文档对象\">#</a> 3.4）从<body>片断中获取文档对象</h4>\n<p>使用 <code>Jsoup.parseBodyFragment(String html)</code>  方法.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java复制代码<span class=\"token class-name\">String</span> html <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;p>Lorem ipsum.&lt;/p>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Document</span> doc <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseBodyFragment</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//doc 此时为：&lt;body> &lt;p>Lorem ipsum.&lt;/p>&lt;/body></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Element</span> body <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>parseBodyFragment</code>  方法创建一个新的文档，并插入解析过的 HTML 到 <code>body</code>  元素中。假如你使用正常的  <code>Jsoup.parse(String html)</code>  方法，通常也能得到相同的结果，但是明确将用户输入作为 body 片段处理是个更好的方式。</p>\n<p><code>Document.body()</code>  方法能够取得文档 body 元素的所有子元素，与  <code>doc.getElementsByTag(&quot;body&quot;)</code>  相同。</p>\n<hr>\n<h1 id=\"四-选择元素element\"><a class=\"markdownIt-Anchor\" href=\"#四-选择元素element\">#</a> 四、选择元素（Element）</h1>\n<blockquote>\n<p>解析文档对象并获取数据一共有 2 种方式，分别为 DOM 方式、CSS 选择器方式，我们可以选择一种自己喜欢的方式去获取数据，效果一样。</p>\n</blockquote>\n<h4 id=\"41dom方式\"><a class=\"markdownIt-Anchor\" href=\"#41dom方式\">#</a> 4.1）DOM 方式</h4>\n<p>将 HTML 解析成一个 <code>Document</code>  之后，就可以使用类似于 DOM 的方法进行操作。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java复制代码<span class=\"token comment\">// 获取 csdn 首页所有的链接</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Document</span> doc       <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://csdn.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Elements</span> elements  <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Elements</span> contents  <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Element</span> content <span class=\"token operator\">:</span> contents<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">String</span> linkHref <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">String</span> linkText <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>linkText<span class=\"token operator\">+</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>linkHref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>说明</strong></p>\n<p><code>Elements</code>  这个对象提供了一系列类似于 DOM 的方法来查找元素，抽取并处理其中的数据。具体如下：</p>\n<p><strong>4.1.1）查找元素</strong></p>\n<ul>\n<li><code>getElementById(String id)</code> ：通过 id 来查找元素</li>\n<li><code>getElementsByTag(String tag)</code> ：通过标签来查找元素</li>\n<li><code>getElementsByClass(String className)</code> ：通过类选择器来查找元素</li>\n<li><code>getElementsByAttribute(String key)</code>  ：通过属性名称来查找元素，例如查找带有 href 元素的标签。</li>\n<li><code>siblingElements()</code> ：获取兄弟元素。如果元素没有兄弟元素，则返回一个空列表。</li>\n<li><code>firstElementSibling()</code> ：获取第一个兄弟元素。</li>\n<li><code>lastElementSibling()</code> ：获取最后一个兄弟元素。</li>\n<li><code>nextElementSibling()</code> ：获取下一个兄弟元素。</li>\n<li><code>previousElementSibling()</code> ：获取上一个兄弟元素。</li>\n<li><code>parent()</code> ：获取此节点的父节点。</li>\n<li><code>children()</code> ：获取此节点的所有子节点。</li>\n<li><code>child(int index)</code> ：获取此节点的指定子节点。</li>\n</ul>\n<p><strong>4.1.2）获取元素数据</strong></p>\n<ul>\n<li><code>attr(String key)</code> ：获取单个属性值</li>\n<li><code>attributes()</code> ：获取所有属性值</li>\n<li><code>attr(String key, String value)</code> ：设置属性值</li>\n<li><code>text()</code> ：获取文本内容</li>\n<li><code>text(String value)</code> ：设置文本内容</li>\n<li><code>html()</code> ：获取元素内的 HTML 内容</li>\n<li><code>html(String value)</code> ：设置元素内的 HTML 内容</li>\n<li><code>outerHtml()</code> ：获取元素外 HTML 内容</li>\n<li><code>data()</code> ：获取数据内容（例如：script 和 style 标签)</li>\n<li><code>id()</code> ：获得 id 值（例： <code>&lt;p id=&quot;goods&quot;&gt;衣服&lt;/p&gt;</code> ）</li>\n<li><code>className()</code> ：获得第一个类选择器值</li>\n<li><code>classNames()</code> ：获得所有的类选择器值</li>\n<li><code>tag()</code> ：获取元素标签</li>\n<li><code>tagName()</code> ：获取元素标签名（如：<p>、<div>等）</li>\n</ul>\n<p><strong>4.1.3）操作 HTML 文本</strong></p>\n<ul>\n<li><code>append(String html)</code> ：在末尾追加 HTML 文本</li>\n<li><code>prepend(String html)</code> ：在开头追加 HTML 文本</li>\n<li><code>html(String value)</code> ：在匹配元素内部添加 HTML 文本。</li>\n</ul>\n<p>–</p>\n<h4 id=\"42css选择器方式\"><a class=\"markdownIt-Anchor\" href=\"#42css选择器方式\">#</a> 4.2）CSS 选择器方式</h4>\n<p>可以使用类似于 CSS 选择器的语法来查找和操作元素，常用的方法为 <code>select(String selector)</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java复制代码<span class=\"token class-name\">Document</span> doc <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://csdn.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 获取带有 href 属性的 a 元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Elements</span> elements <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a[href]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Element</span> content <span class=\"token operator\">:</span> elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">String</span> linkHref <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">String</span> linkText <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>linkText <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>linkHref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>4.2.1）说明</strong></p>\n<p><code>select()</code>  方法在 <code>Document</code> 、 <code>Element</code>  或 <code>Elements</code>  对象中都可以使用，而且是上下文相关的，因此可实现指定元素的过滤，或者采用链式访问。</p>\n<p><code>select()</code>  方法将返回一个 <code>Elements</code>  集合，并提供一组方法来抽取和处理结果。</p>\n<p><strong>4.2.2） <code>select(String selector)</code>  方法参数简介</strong></p>\n<ul>\n<li><code>tagname</code> : 通过标签查找元素，例如通过 <code>&quot;a&quot;</code>  来查找 <code>&lt;a&gt;</code>  标签。</li>\n<li><code>#id</code> : 通过 ID 查找元素，比如通过 <code>#logo</code>  查找 <code>&lt;p id=&quot;logo&quot;&gt;</code> 。</li>\n<li><code>.class</code> : 通过 class 名称查找元素，比如通过 <code>.titile</code>  查找 <code>&lt;p class=&quot;titile&quot;&gt;</code> 。</li>\n<li><code>ns|tag</code> : 通过标签在命名空间查找元素，比如使用  <code>fb|name</code>  来查找  <code>&lt;fb:name&gt;</code>  。</li>\n<li><code>[attribute]</code> : 利用属性查找元素，比如通过 <code>[href]</code>  查找 <code>&lt;a href=&quot;...&quot;&gt;</code> 。</li>\n<li><code>[^attribute]</code> : 利用属性名前缀来查找元素，比如：可以用 <code>[^data-]</code>  来查找带有 HTML5 dataset 属性的元素。</li>\n<li><code>[attribute=value]</code> : 利用属性值来查找元素，比如： <code>[width=500]</code> 。</li>\n<li><code>[attribute^=value]</code> ,  <code>[attribute$=value]</code> ,  <code>[attribute*=value]</code> : 利用匹配属性值开头、结尾或包含属性值来查找元素，比如通过 <code>[href*=/path/]</code>  来查找 <code>&lt;a href=&quot;a/path/c.html&quot;&gt;</code> 。</li>\n<li><code>[attribute~=regex]</code> : 利用属性值匹配<strong>正则表达式</strong>来查找元素，比如通过  <code>img[src~=(?i)\\.(png|jpe?g)]</code>  来匹配所有的 png 或者 jpg、jpeg 格式的图片。</li>\n<li><code>*</code> : 通配符，匹配所有元素。</li>\n</ul>\n<p><strong>4.2.3）参数属性组合使用</strong></p>\n<ul>\n<li><code>el#id</code> : 元素 + ID，比如：  <code>div#logo</code></li>\n<li><code>el.class</code> : 元素 + class，比如：  <code>div.masthead</code></li>\n<li><code>el[attr]</code> : 元素 + class，比如  <code>a[href]</code>  匹配所有带有 href 属性的 a 元素。</li>\n<li>任意组合，比如： <code>a[href].highlight</code>  匹配所有带有 href 属性且 class=&quot;highlight&quot; 的 a 元素。</li>\n<li><code>ancestor child</code> : 查找某个元素下子元素，比如：可以用 <code>.body p</code>  查找在 &quot;body&quot; 元素下的所有  <code>p</code>  元素</li>\n<li><code>parent &gt; child</code> : 查找某个父元素下的直接子元素，比如：可以用 <code>div.content &gt; p</code>  查找  <code>p</code>  元素，也可以用 <code>body &gt; *</code>  查找 body 标签下所有直接子元素</li>\n<li><code>siblingA + siblingB</code> : 查找在 A 元素之前第一个同级元素 B，比如： <code>div.head + div</code></li>\n<li><code>siblingA ~ siblingX</code> : 查找 A 元素之前的同级 X 元素，比如： <code>h1 ~ p</code></li>\n<li><code>el, el, el</code> : 多个选择器组合，查找匹配任一选择器的唯一元素，例如： <code>div.masthead, div.logo</code></li>\n</ul>\n<p><strong>4.2.4）特殊参数：伪选择器</strong></p>\n<ul>\n<li><code>:lt(n)</code> : 查找哪些元素的同级索引值（它的位置在 DOM 树中是相对于它的父节点）小于 n，比如： <code>td:lt(3)</code>  表示小于三列的元素</li>\n<li><code>:gt(n)</code> : 查找哪些元素的同级索引值大于 <code>n``，比如</code> ：  <code>div p:gt(2)</code>  表示哪些 div 中有包含 2 个以上的 p 元素</li>\n<li><code>:eq(n)</code> : 查找哪些元素的同级索引值与 <code>n</code>  相等，比如： <code>form input:eq(1)</code>  表示包含一个 input 标签的 Form 元素</li>\n<li><code>:has(seletor)</code> : 查找匹配选择器包含元素的元素，比如： <code>div:has(p)</code>  表示哪些 div 包含了 p 元素</li>\n<li><code>:not(selector)</code> : 查找与选择器不匹配的元素，比如：  <code>div:not(.logo)</code>  表示不包含 class=logo 元素的所有 div 列表</li>\n<li><code>:contains(text)</code> : 查找包含给定文本的元素，搜索不区分大不写，比如：  <code>p:contains(jsoup)</code></li>\n<li><code>:containsOwn(text)</code> : 查找直接包含给定文本的元素</li>\n<li><code>:matches(regex)</code> : 查找哪些元素的文本匹配指定的正则表达式，比如： <code>div:matches((?i)login)</code></li>\n<li><code>:matchesOwn(regex)</code> : 查找自身包含文本匹配指定正则表达式的元素</li>\n<li>注意：上述伪选择器索引是从 0 开始的，也就是说第一个元素索引值为 0，第二个元素 index 为 1 等</li>\n</ul>\n<hr>\n<h1 id=\"五-获取数据node\"><a class=\"markdownIt-Anchor\" href=\"#五-获取数据node\">#</a> 五、获取数据（Node）</h1>\n<blockquote>\n<p>在获得文档对象并且指定查找元素后，我们就可以获取元素中的数据。 这些访问器方法都有相应的 setter 方法来更改数据。</p>\n</blockquote>\n<ul>\n<li><code>.attr(String key)</code>  ：获得属性的值。</li>\n<li><code>.text()</code> ：获得元素中的文本。</li>\n<li><code>.html()</code> ：获得元素或属性<strong>内部</strong>的 HTML 内容（不包括本身）。</li>\n<li><code>.outerHtml()</code> ：获得元素或属性<strong>完整</strong>的 HTML 内容。</li>\n<li><code>.id()</code> ：获得元素 id 属性值。</li>\n<li><code>className()</code> ：获得元素类选择器值。</li>\n<li><code>.tagName()</code> ：获得元素标签命名。</li>\n<li><code>.hasClass(String className)</code> ：检查这个元素是否含有一个类选择器（不区分大小写）。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java复制代码<span class=\"token class-name\">String</span>   html <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;p>&lt;a href='http://csdn.com/'>&lt;b>example&lt;/b>&lt;/a> link.&lt;/p>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Document</span> doc  <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 查找第一个 & lt;a > 元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Element</span> link <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 输出：example</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">String</span> text     <span class=\"token operator\">=</span> link<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 输出：http://csdn.com/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">String</span> href <span class=\"token operator\">=</span> link<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 输出：&lt;b>example&lt;/b></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">String</span> aHtml     <span class=\"token operator\">=</span> link<span class=\"token punctuation\">.</span><span class=\"token function\">outerHtml</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 输出：&lt;a href='http://csdn.com/'>&lt;b>example&lt;/b>&lt;/a></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">String</span> aOuterHtml     <span class=\"token operator\">=</span> link<span class=\"token punctuation\">.</span><span class=\"token function\">outerHtml</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>–</p>\n<hr>\n<h1 id=\"六-修改数据\"><a class=\"markdownIt-Anchor\" href=\"#六-修改数据\">#</a> 六、修改数据</h1>\n<blockquote>\n<p>在解析了一个 Document 对象之后，你可能想修改其中的某些属性值，并把它输出到前台页面或保存到其他地方，jsoup 对此提供了一套非常简便的接口（支持链式写法）。</p>\n</blockquote>\n<h4 id=\"61设置属性的值\"><a class=\"markdownIt-Anchor\" href=\"#61设置属性的值\">#</a> 6.1）设置属性的值</h4>\n<p>当以下方法针对 <code>Element</code>  对象操作时，只有一个元素会受到影响。当针对 <code>Elements</code>  对象进行操作时，可能会影响到多个元素。</p>\n<ul>\n<li><code>.attr(String key, String value)</code> ：设置标签的属性值。</li>\n<li><code>.addClass(String className)</code> ：增加类选择器选项</li>\n<li><code>.removeClass(String className)</code> ：删除对应的类选择器</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java复制代码<span class=\"token class-name\">Document</span> doc <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://csdn.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 复数，Elements</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Elements</span> elements <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 单数，Element</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Element</span> element <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 复数对象，所有 class=\"text\" 的元素都将受到影响</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>elements<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"goods\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 单数对象，只有一个元素会受到影响（链式写法）</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>element<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"shop\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"62修改元素的html内容\"><a class=\"markdownIt-Anchor\" href=\"#62修改元素的html内容\">#</a> 6.2）修改元素的 HTML 内容</h4>\n<p>可以使用 <code>Element</code>  中的 HTML 设置方法具体如下：</p>\n<ul>\n<li><code>.html(String value)</code> ：这个方法将先清除元素中的 HTML 内容，然后用传入的 HTML 代替。</li>\n<li><code>.prepend(String value)</code> ：在元素<strong>前</strong>添加 html 内容。</li>\n<li><code>.append(String value)</code> ：在元素<strong>后</strong>添加 html 内容。</li>\n<li><code>.wrap(String value)</code> ：对元素包裹一个外部 HTML 内容，将元素置于新增的内容中间。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java复制代码<span class=\"token class-name\">Document</span> doc <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://csdn.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Element</span> div <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;p>csdn&lt;/p>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function\">prepend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;p>a&lt;/p>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;p>good&lt;/p>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 输出：&lt;div\"> &lt;p>a&lt;/p> &lt;p>csdn&lt;/p> &lt;p>good&lt;/p> &lt;/div></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">Element</span> span <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>span<span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;li>&lt;a href='...'>&lt;/a>&lt;/li>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 输出: &lt;li>&lt;a href=\"...\"> &lt;span>csdn&lt;/span> &lt;/a>&lt;/li></span></pre></td></tr></table></figure><h4 id=\"63修改元素的文本内容\"><a class=\"markdownIt-Anchor\" href=\"#63修改元素的文本内容\">#</a> 6.3）修改元素的文本内容</h4>\n<p>对于传入的文本，如果含有像  <code>&lt;</code> ,  <code>&gt;</code>  等这样的字符，将以文本处理，而非 HTML。</p>\n<ul>\n<li><code>.text(String text)</code>  ：清除元素内部的 HTML 内容，然后用提供的文本代替。</li>\n<li><code>.prepend(String first)</code> ：在元素<strong>后</strong>添加文本节点。</li>\n<li><code>Element.append(String last)</code> ：在元素<strong>前</strong>添加文本节点。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java复制代码 <span class=\"token comment\">// &lt;div>&lt;/div></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Element</span> div <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" one \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function\">prepend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" two \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" three \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 输出: &lt;div> two one three &lt;/div></span></pre></td></tr></table></figure><hr>\n<h1 id=\"七-其他功能\"><a class=\"markdownIt-Anchor\" href=\"#七-其他功能\">#</a> 七、其他功能</h1>\n<h4 id=\"71相对路径转绝对路径\"><a class=\"markdownIt-Anchor\" href=\"#71相对路径转绝对路径\">#</a> 7.1）相对路径转绝对路径</h4>\n<p><strong>问题描述</strong>：  你有一个包含相对 URLs 路径的 HTML 文档，现在需要将这些相对路径转换成绝对路径的 URLs。</p>\n<p><strong>解决方式</strong>：</p>\n<ol>\n<li>确保在你解析文档时有指定 <code>base URI</code>  路径。</li>\n<li>然后使用  <code>abs:</code>  属性前缀来取得包含 <code>base URI</code>  的绝对路径。代码如下：</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java复制代码<span class=\"token class-name\">Document</span> doc <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.open-open.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Element</span> link <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 输出：/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">String</span> relHref <span class=\"token operator\">=</span> link<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 输出：http://www.open-open.com/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">String</span> absHref <span class=\"token operator\">=</span> link<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abs:href\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>说明</strong>：</p>\n<p>在 HTML 元素中，URLs 经常写成相对于文档位置的相对路径，如： <code>&lt;a href=&quot;/download&quot;&gt;...&lt;/a&gt;</code> 。当你使用  <code>.attr(String key)</code>  方法来取得 a 元素的 href 属性时，它将直接返回在 HTML 源码中指定的值。</p>\n<p>假如你需要取得一个绝对路径，需要在属性名前加  <code>abs:</code>  前缀，这样就可以返回包含根路径的 URL 地址 <code>attr(&quot;abs:href&quot;)</code> 。因此在解析 HTML 文档时，定义 base URI 非常重要。</p>\n<p>如果你不想使用 <code>abs:</code>  前缀，还有一个方法能够实现同样的功能  <code>.absUrl(String key)</code> 。</p>\n<p>–</p>\n<h4 id=\"72消除不受信任的html-防止xss攻击\"><a class=\"markdownIt-Anchor\" href=\"#72消除不受信任的html-防止xss攻击\">#</a> 7.2）消除不受信任的 HTML (防止 XSS 攻击)</h4>\n<p><strong>问题描述</strong>：</p>\n<p>在某些网站中经常会提供用户评论的功能，但是有些不怀好意的用户，会搞一些脚本到评论内容中，而这些脚本可能会破坏整个页面的行为，更严重的是获取一些机要信息，此时需要清理该 HTML，以避免跨站脚本攻击（XSS）。</p>\n<p><strong>解决方式</strong>：  使用 <code>clean()</code>  方法清除恶意代码，但需要指定一个配置的  <code>Safelist</code> （旧版本中是 <code>Whitelist</code> ），通常使用 <code>Safelist.basic()</code>  即可。 <code>Safelist</code>  的工作原理是将输入的 HTML 内容单独隔离解析，然后遍历解析树，只允许已知的安全标签和属性输出。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java复制代码<span class=\"token class-name\">String</span> unsafe <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token string\">\"&lt;p>&lt;a href='http://csdn.com/' onclick='attack()'>Link&lt;/a>&lt;/p>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 输出: &lt;p>&lt;a href=\"http://csdn.com/\" >Link&lt;/a>&lt;/p></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">String</span> safe <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">clean</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Safelist</span><span class=\"token punctuation\">.</span><span class=\"token function\">basic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>safe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>说明</strong>：</p>\n<p>jsoup 的 <code>Safelist</code>  不仅能够在服务器端对用户输入的 HTML 进行过滤，只输出一些安全的标签和属性，还可以限制用户可以输入的标签范围。</p>\n",
            "tags": [
                "java",
                "计算机学科",
                "爬虫",
                "第三方库"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/Java%E7%88%AC%E5%8F%96%E6%9F%90%E7%BD%91%E7%AB%99%E6%89%80%E6%9C%89%E5%9B%BE%E7%89%87%E6%A1%88%E4%BE%8B/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/Java%E7%88%AC%E5%8F%96%E6%9F%90%E7%BD%91%E7%AB%99%E6%89%80%E6%9C%89%E5%9B%BE%E7%89%87%E6%A1%88%E4%BE%8B/",
            "title": "Java爬取某网站所有图片案例",
            "date_published": "2024-04-02T10:00:51.354Z",
            "content_html": "<h1 id=\"java爬取某网站所有图片案例\"><a class=\"markdownIt-Anchor\" href=\"#java爬取某网站所有图片案例\">#</a> Java 爬取某网站所有图片案例</h1>\n<p>使用 maven 工程</p>\n<p>引入依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.jsoup<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jsoup<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.13.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>任务：</p>\n<ol>\n<li>找到目标网址</li>\n<li>通过浏览器控制台查看包含了图片的 html 元素标签</li>\n<li>通过 java 代码请求 url 并且通过 jsoup 库来解析 html 标签获取想要的信息</li>\n</ol>\n<p>开始编码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImageCrawlers</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://mp.weixin.qq.com/s/YPrqMOYYrAtCni2VT8c4jA\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">// 获取页面的 document 对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">Document</span> document <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 获取元素对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">Element</span> content <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"js_content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果:</p>\n<p>由于获取的内容太多了，下面打印的信息是我截取过的，能看出来成功了就行</p>\n<pre><code>&lt;div class=&quot;rich_media_content js_underline_content\n                       &quot; id=&quot;js_content&quot; style=&quot;visibility: hidden;&quot;&gt;\n &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/DVk7VUQZ3qGeicxDibu7SlxIT62BJb593CqZhaC2FQbtcUracbaAicPXVrTZmaqlPC3gibYRSzcJ7licU3ibDVibjWBng/640?wx_fmt=jpeg&quot; style=&quot;text-align: center;&quot;&gt;&lt;/p&gt;\n &lt;section&gt;\n  &lt;section powered-by=&quot;xiumi.us&quot;&gt;\n   &lt;section&gt;\n     &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/FJtasAibLFa6MScppd3RCMHwXCXbfduXo8cVtNz1WTPLCLz99V025BczdC8UBfzrmybo4j8RiarV15Fzq3KxBbyw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; style=&quot;&quot;&gt;&lt;/p&gt;\n     &lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;\n      &lt;section style=&quot;white-space: normal;box-sizing: border-box;font-size: 16px;&quot; mpa-from-tpl=&quot;t&quot;&gt;\n       &lt;section powered-by=&quot;xiumi.us&quot; style=&quot;margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;&quot; mpa-from-tpl=&quot;t&quot;&gt;\n        &lt;section style=&quot;border-top: 1px dashed rgb(37, 180, 170);box-sizing: border-box;line-height: 0;&quot; mpa-from-tpl=&quot;t&quot;&gt;\n         &lt;section style=&quot;line-height: 0;width: 0px;&quot; mpa-from-tpl=&quot;t&quot;&gt;\n          &lt;svg viewbox=&quot;0 0 1 1&quot; style=&quot;vertical-align:top;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;/svg&gt;\n         &lt;/section&gt;\n      &lt;/section&gt;\n      &lt;p style=&quot;white-space: normal;text-align: center;&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.275&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/FJtasAibLFa6jZOQXB4rNue2qGicGC67SUw4NAJ0Hv99GsCPgXY0sbrhibvApAKDJzib18TicD1Hia0S1716qRqHGuiaQ/640?wx_fmt=jpeg&quot; style=&quot;width: 677px !important;height: auto !important;visibility: visible !important;&quot;&gt;&lt;/p&gt;\n     &lt;/section&gt;\n    &lt;/section&gt;\n   &lt;/section&gt;\n  &lt;/section&gt;\n &lt;/section&gt;\n&lt;/div&gt;\n</code></pre>\n<p>下一步我们继续编码，获取 content 对象里面所有的 img 标签</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImageCrawlers</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://mp.weixin.qq.com/s/YPrqMOYYrAtCni2VT8c4jA\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">// 获取页面的 document 对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">Document</span> document <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 获取元素对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">Element</span> content <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"js_content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 通过上面的对象获取里面所有的 img 标签内容</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">Elements</span> imgs <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>imgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<p>图片太多了，下面打印是我截取过的数据</p>\n<pre><code>&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/DVk7VUQZ3qGeicxDibu7SlxIT62BJb593CqZhaC2FQbtcUracbaAicPXVrTZmaqlPC3gibYRSzcJ7licU3ibDVibjWBng/640?wx_fmt=jpeg&quot; style=&quot;text-align: center;&quot;&gt;\n&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/DVk7VUQZ3qGeicxDibu7SlxIT62BJb593C28QsQKN9ib198mFLvyG6vhpMrdiaUAeDRlTWQ3othPaZA2TMKDaFQqiaQ/640?wx_fmt=jpeg&quot; style=&quot;&quot;&gt;\n</code></pre>\n<p>继续编码获取 data-src 属性里面的路径</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImageCrawlers</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://mp.weixin.qq.com/s/YPrqMOYYrAtCni2VT8c4jA\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">// 获取页面的 document 对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">Document</span> document <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 获取元素对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">Element</span> content <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"js_content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 通过上面的对象获取里面所有的 img 标签内容</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">Elements</span> imgs <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 通过 stream 流遍历 里面对象调用 attr 获取 data-src 属性的值 并打印输出</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            imgs<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>element <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data-src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<p>是很多的图片路径</p>\n<pre><code>https://mmbiz.qpic.cn/sz_mmbiz_jpg/DVk7VUQZ3qGeicxDibu7SlxIT62BJb593COl353kWkzxwAckMU531UJ33KXD3YFYXYiaAnXo7M2cF22wZGG6Gib5sg/640?wx_fmt=jpeg\nhttps://mmbiz.qpic.cn/sz_mmbiz_jpg/DVk7VUQZ3qGeicxDibu7SlxIT62BJb593CsoRbMW21hdjAjT9EpkU9XO6Uv22LrCmauG76NPW6l2zKjC6XCQ5uQQ/640?\n</code></pre>\n<p>拿到了图片的路径我们就可以通过 URL 对象来进行 IO 操作了将所有图片下载到本地某个文件夹中，最终代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImageCrawlers</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://mp.weixin.qq.com/s/YPrqMOYYrAtCni2VT8c4jA\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">// 获取页面的 document 对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">Document</span> document <span class=\"token operator\">=</span> <span class=\"token class-name\">Jsoup</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 获取元素对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">Element</span> content <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"js_content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 通过上面的对象获取里面所有的 img 标签内容</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">Elements</span> imgs <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 通过 stream 流遍历 里面对象调用 attr 获取 data-src 属性的值 并打印输出</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">AtomicInteger</span> imgName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            imgs<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>element <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token class-name\">String</span> src <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data-src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token class-name\">FileOutputStream</span> os <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token class-name\">URL</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token class-name\">URLConnection</span> urlConnection <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">openConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    is <span class=\"token operator\">=</span> urlConnection<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    os <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\images\\\\\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>imgName<span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        os<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MalformedURLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>os <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                            os<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                            is<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"所有图片下载完毕\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240308175451211.png\" alt=\"image-20240308175451211\"></p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240308175502902.png\" alt=\"image-20240308175502902\"></p>\n",
            "tags": [
                "知识点",
                "爬虫"
            ]
        }
    ]
}