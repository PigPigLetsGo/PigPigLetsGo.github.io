{
    "version": "https://jsonfeed.org/version/1",
    "title": "homepage • All posts by \"还原二叉树\" tag",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io/homepage",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/java/programming-questions/%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/java/programming-questions/%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "title": "从前序与中序遍历序列构造二叉树",
            "date_published": "2024-04-02T06:23:30.516Z",
            "content_html": "<h1 id=\"从前序与中序遍历序列构造二叉树\"><a class=\"markdownIt-Anchor\" href=\"#从前序与中序遍历序列构造二叉树\">#</a> 从前序与中序遍历序列构造二叉树</h1>\n<p>给定两个整数数组  <code>preorder</code>  和  <code>inorder</code>  ，其中  <code>preorder</code>  是二叉树的<strong>先序遍历</strong>，  <code>inorder</code>  是同一棵树的<strong>中序遍历</strong>，请构造二叉树并返回其根节点。</p>\n<p><strong>示例 1:</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/tree.jpg\" alt=\"img\"></p>\n<pre><code>输入: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n输出: [3,9,20,null,null,15,7]\n</code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code>输入: preorder = [-1], inorder = [-1]\n输出: [-1]\n</code></pre>\n<p><strong>提示:</strong></p>\n<ul>\n<li><code>1 &lt;= preorder.length &lt;= 3000</code></li>\n<li><code>inorder.length == preorder.length</code></li>\n<li><code>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code></li>\n<li><code>preorder</code>  和  <code>inorder</code>  均 <strong>无重复</strong> 元素</li>\n<li><code>inorder</code>  均出现在  <code>preorder</code></li>\n<li><code>preorder</code>  <strong>保证</strong> 为二叉树的前序遍历序列</li>\n<li><code>inorder</code>  <strong>保证</strong> 为二叉树的中序遍历序列</li>\n</ul>\n<h2 id=\"思路分析\"><a class=\"markdownIt-Anchor\" href=\"#思路分析\">#</a> 思路分析：</h2>\n<p>这个题目的意思是给了你 一颗二叉树它的 前序，中序遍历结果了</p>\n<p>比如说这颗二叉树的前序遍历结果是：1，2，4，3，6，7</p>\n<p>这颗二叉树的中序遍历结果是：4，2，1，6，3，7</p>\n<p>根据上面两个二叉树的遍历结果 二叉树创建出来应该是如下样子：</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240130102702438.png\" alt=\"image-20240130102702438\"></p>\n<p>我们分析一下 还原二叉树的 过程：</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240130103359529.png\" alt=\"image-20240130103359529\"></p>\n<p>我们通过 前序遍历 就看得知 root 节点肯定是 1 ，但是我们继续从 前序遍历中找的 话 我们就很难分辨出哪个是 root 的左子树 和 右子树了，虽然我们看上面完整的二叉树我们得知了 root 的左子树和 右子树是 2，3。但是 还可能有一种情况使它 的 左子树 和 右子树为 2，6，所以我们不能 根据前序遍历确定它这个树 长什么样子</p>\n<p>这时我们再结合中序遍历的结果，中序遍历的特点是：先打印完 左子树 然后就是 中值，最后是 右子树，我们再看 中序遍历的结果：4，2，1，6，3，7。从 前序遍历中我们已知了 root 节点肯定是 1 那么 从中序遍历中看的话，1 是 root 而 1 左边就是 左子树的节点，而 1 的右边就是 右子树的节点了</p>\n<p>所以根据 中序遍历 我们确定了 1 的左子树分别是： 2，4。1 的右子树 分别是：3，6，7</p>\n<p>通过上面的了解得出如下：</p>\n<pre><code> 根 1                      根 1            \n  pre                       inf\n左 2,4                    左 4,2\n右 3,6,7                  右 6,3,7\n</code></pre>\n<p>通过上面列出的我们发现这好像是一个<mark>子问题</mark></p>\n<p>如果我们不看上面的东西了，我们就看这次 2，4 这个结果 你怎么分辨出 哪个是根节点，哪个是左 / 右子树？</p>\n<p><strong>答</strong>：</p>\n<p>我们先从 根节点 查看 我们从 前序遍历中 找到 第一个元素就是根节点 也就是 2，随后我们看 中序遍历 的 4 在 2 的左边说明了 4 是 左子树 得到答案如下：</p>\n<pre><code>  2\n /\n4\n</code></pre>\n<p>那我们再看 结果为：6，3，7 的呢？</p>\n<p>我们先看前序遍历中 3 是 第一个元素 那么它就是根节点，确定了根节点，我们再看中序遍历 6 在左边 那它就是左子树，7 在 3 的右边 那 7 就是 右子树 ，得到答案如下：</p>\n<pre><code>  3\n / \\\n6   7\n</code></pre>\n<p>就这样的向下 找 最后 节点为 null 了，我们就可以停止子问题的递归了。</p>\n<p>所以这道题 比较直接的 方法就是 使用递归的方法，根据两组遍历结果 去 确定根 确定左边有哪些，确定右边有哪些。知道没办法再次切分为止</p>\n<h2 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryDemo02</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> preOrderArray<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> infixOrderArray<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">BinaryTree</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> heroNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinaryDemo02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>preOrderArray<span class=\"token punctuation\">,</span> infixOrderArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        b<span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span>heroNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> root <span class=\"token operator\">=</span> heroNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"前序遍历：\"</span> <span class=\"token operator\">+</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token class-name\">HeroNode</span> pop <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                root <span class=\"token operator\">=</span> pop<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> preOrder<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inOrder<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>preOrder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> inOrder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 通过前序遍历我们获取 root 节点 的值</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> rootValue <span class=\"token operator\">=</span> preOrder<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 将 root 节点 赋值给 节点类</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span>rootValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> inOrder<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 循环 如果 当前索引值等于 root 节点说明找到了 root 节点的索引位置了</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inOrder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> rootValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token comment\">// 从 0 到 i - 1 就是左子树</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token comment\">//copyOfRange 根据 区间 复制 一个数组 参数：inOrder 要复制的数组 区间：从 0 到 i-1 (含头不含尾 所以 i 就是 i - 1 的效果)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inLeft <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>inOrder<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [4. 2]</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token comment\">// 从 i + 1 到 inOrder.length - 1 就是右子树</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inRight <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>inOrder<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inOrder<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [6, 3, 7]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token comment\">// 从 1 到 i - 1 就是左子树 因为需要 略过 0 索引的值 因为它就是 根节点 而我们要找的是 4，2 中谁是根 这时我们需要前序遍历的结果来判断</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preLeft <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>preOrder<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [2, 4]</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token comment\">// 从 i + 1 到 preOrder.length - 1 就是右子树</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preRight <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>preOrder<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> preOrder<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [3, 6, 7]</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                root<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span><span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>preLeft<span class=\"token punctuation\">,</span> inLeft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                root<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span><span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>preRight<span class=\"token punctuation\">,</span> inRight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>前序遍历：1\n前序遍历：2\n前序遍历：4\n前序遍历：3\n前序遍历：6\n前序遍历：7\n</code></pre>\n",
            "tags": [
                "java",
                "编程题",
                "二叉树",
                "还原二叉树"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/java/programming-questions/%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/java/programming-questions/%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "title": "从中序与后序遍历序列构造二叉树",
            "date_published": "2024-04-02T06:23:30.513Z",
            "content_html": "<h1 id=\"从中序与后序遍历序列构造二叉树\"><a class=\"markdownIt-Anchor\" href=\"#从中序与后序遍历序列构造二叉树\">#</a> 从中序与后序遍历序列构造二叉树</h1>\n<p>给定两个整数数组  <code>inorder</code>  和  <code>postorder</code>  ，其中  <code>inorder</code>  是二叉树的中序遍历，  <code>postorder</code>  是同一棵树的后序遍历，请你构造并返回这颗 <em>二叉树</em> 。</p>\n<p><strong>示例 1:</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/tree.jpg\" alt=\"img\"></p>\n<pre><code>输入：inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\n输出：[3,9,20,null,null,15,7]\n</code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code>输入：inorder = [-1], postorder = [-1]\n输出：[-1]\n</code></pre>\n<p><strong>提示:</strong></p>\n<ul>\n<li><code>1 &lt;= inorder.length &lt;= 3000</code></li>\n<li><code>postorder.length == inorder.length</code></li>\n<li><code>-3000 &lt;= inorder[i], postorder[i] &lt;= 3000</code></li>\n<li><code>inorder</code>  和  <code>postorder</code>  都由 <strong>不同</strong> 的值组成</li>\n<li><code>postorder</code>  中每一个值都在  <code>inorder</code>  中</li>\n<li><code>inorder</code>  <strong>保证</strong>是树的中序遍历</li>\n<li><code>postorder</code>  <strong>保证</strong>是树的后序遍历</li>\n</ul>\n<h2 id=\"思路分析\"><a class=\"markdownIt-Anchor\" href=\"#思路分析\">#</a> 思路分析：</h2>\n<p>没看过 “ 从前序与中序遍历序列构造二叉树 &quot; 可以先看下，从这个文章中我们知道了 前序遍历可以很容易的找到 某一层的 根节点 因为 根节点的值 是最先打印的 但是 光靠 前序遍历我们 看不出来 这个根节点它的 左右孩子 是 左边 还是右边的，所以我们需要 结合着 中序遍历 才能分辨出 左右孩子的位置</p>\n<p>而中序遍历 配合 后序遍历 还原二叉树也比较简单，我们只需要 通过后序遍历 的 最后一个值 就是 根节点 因为 后序遍历 顺序为：左，右，值　。　然后再通过 中序遍历来分辨 根节点 左右孩子的位置即可。</p>\n<h2 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> postorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 判断 中序和 后序是否有元素，如果没有就返回 null</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> postorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     \t  <span class=\"token comment\">// 通过后序遍历数组的最后一个元素获取 二叉树的根节点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> rootValue <span class=\"token operator\">=</span> postorder<span class=\"token punctuation\">[</span>postorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 将 root 节点存入创建的节点对象中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>rootValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 循环 中序数组</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> inorder<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 判断如果 中序数组 第 i 个索引值 等于 根节点就执行代码</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> rootValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// 复制一个数组 元素为：inorder 数组的 0 到 i - 1 区间的元素，也就是当前根节点的左子树</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">int</span> inLeft<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 9</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token comment\">// 复制一个数组 元素为：inorder 数组的 i + 1 到 inorder.length - 1 区间的元素，也就是当前根节点的右子树</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">int</span> inRight<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 15,20,7</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token comment\">// 复制一个数组，元素为：postorder 数组的 0 到 i - 1 区间的元素，也就是当前根节点的左子树</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">int</span> postLeft<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 9</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 复制一个数组，元素为：postorder 数组的 i 到 postorder.length - 1 区间的元素，也就是当前根节点的右子树</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">int</span> postRight<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> postorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 15,7,20</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>inLeft<span class=\"token punctuation\">,</span> postLeft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 9</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>inRight<span class=\"token punctuation\">,</span> postRight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 20</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "java",
                "编程题",
                "二叉树",
                "还原二叉树"
            ]
        }
    ]
}