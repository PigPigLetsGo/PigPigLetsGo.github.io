{
    "version": "https://jsonfeed.org/version/1",
    "title": "homepage • All posts by \"api的区别\" tag",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io/homepage",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%A0%81%E7%82%B9,%E4%BB%A3%E7%A0%81%E5%8D%95%E5%85%83,lnegth,codePointCount%E6%96%B9%E6%B3%95%E5%BF%83%E5%BE%97/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%A0%81%E7%82%B9,%E4%BB%A3%E7%A0%81%E5%8D%95%E5%85%83,lnegth,codePointCount%E6%96%B9%E6%B3%95%E5%BF%83%E5%BE%97/",
            "title": "码点,代码单元,lnegth,codePointCount",
            "date_published": "2024-04-02T10:00:51.423Z",
            "content_html": "<h1 id=\"码点代码单元lnegthcodepointcount\"><a class=\"markdownIt-Anchor\" href=\"#码点代码单元lnegthcodepointcount\">#</a> 码点，代码单元，lnegth,codePointCount</h1>\n<p>[TOC]</p>\n<p>码点，代码单元，length (),codePointCount ()</p>\n<p>下面是我在阅读 &lt;&lt;Java 核心技术卷 Ⅰ&gt;&gt; 中的两段代码</p>\n<h3 id=\"length方法\"><a class=\"markdownIt-Anchor\" href=\"#length方法\">#</a> length () 方法</h3>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081434624.png\" alt=\"image-20220831143809050\"></p>\n<p><code>Returns the length of this string. The length is equal to the number of Unicode code units in the string.</code></p>\n<ul>\n<li>返回此字符串的长度，长度等于字符串中的 Unicode<mark> 代码单元</mark>数</li>\n</ul>\n<h3 id=\"codepointcount方法\"><a class=\"markdownIt-Anchor\" href=\"#codepointcount方法\">#</a> codePointCount () 方法</h3>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081434404.png\" alt=\"image-20220831143859921\"></p>\n<p><code>Returns the number of Unicode code points in the specified text range of this String.</code></p>\n<ul>\n<li>返回此字符串指定文本范围内的 Unicode<mark> 码点</mark>数</li>\n</ul>\n<h3 id=\"length方法和codepointcount方法的区别\"><a class=\"markdownIt-Anchor\" href=\"#length方法和codepointcount方法的区别\">#</a> length () 方法和 codePointCount () 方法的区别</h3>\n<p>从返回值可以看出: length () 方法返回的是代码单元，codePointCount () 方法返回的是码点，而代码单元和码点究竟是什么呢？它们有什么区别呢？</p>\n<table>\n<thead>\n<tr>\n<th>length()</th>\n<th>codePointCount()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>返回此字符串的长度，长度等于字符串中的 Unicode<mark> 代码单元</mark>数</td>\n<td>返回此字符串指定文本范围内的 Unicode<mark> 码点</mark>数</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>从下面这个例子的结果来看，码点和代码单元似乎没有区别</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> greeting<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> cpCount <span class=\"token operator\">=</span> greeting<span class=\"token punctuation\">.</span><span class=\"token function\">codePointCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> greeting<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cpCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果:    <code>5</code></p>\n<p>​\t\t\t\t   <code>5</code></p>\n<ul>\n<li>但是从这个例子就可以看出码点和代码单元的不同了，下面我们就来聊一下码点和代码单元</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> greeting<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> cpCount <span class=\"token operator\">=</span> greeting<span class=\"token punctuation\">.</span><span class=\"token function\">codePointCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> greeting<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cpCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=-------------=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"😂\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">codePointCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr></table></figure><p>打印结果: <img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081434986.png\" alt=\"image-20220831144457496\"></p>\n<h3 id=\"码点\"><a class=\"markdownIt-Anchor\" href=\"#码点\">#</a> 码点</h3>\n<p>码点就是你实际看到的每一个字符，比如:a,1,%,😂等都算一个码点</p>\n<blockquote>\n<p>码点 (Code Point)</p>\n<p>码点是指与一个编码表中的某个字符对应的值，在 Unicode 标准中，码点采用了十六进制书写，并加上前缀 U+, 例如 U+0041 就是拉丁字母 A 的码点，Unicode 的码点可以分成 17 个代码平面，第一个代码平面成为基本多语言平面，包括码点从 U+0000 到 U+FFFF 的经典 Unicode 代码，其余的 16 个平面的码点为从 U+10000 到 U+10FFFF, 包括辅助字符</p>\n<p>----------  &lt;&lt;Java 核心技术卷 Ⅰ&gt;&gt;P33</p>\n</blockquote>\n<h3 id=\"代码单元\"><a class=\"markdownIt-Anchor\" href=\"#代码单元\">#</a> 代码单元</h3>\n<p>而代码单元就不一定是你实际看到的每一个字符，有可能你实际看到的字符是包含一个代码单元，也有可能包含两个代码单元，这是因为:</p>\n<p>java 的字符串由 char 类型序列组成，而 char 类型原本是用来表示单个字符的，但是由于 Unicode 编码的机制，16 位的 char 类型已经无法满足描述所有的 Unicode 字符的需要了，那么有些 Unicode 字符就需要两个 char 值表示，则可对应上下文中的高亮字体:<mark> 一个代码单元时一个字符的编码</mark></p>\n<blockquote>\n<p>代码单元 (Code Unit)</p>\n<p>UTF-16 编码采用不同长度的编码表示所有 Unicode 编码，在基本多语言平面中，每个字符用 1 位表示，称为代码单元，辅助字符编码为一对连续的代码单元，采用这种编码对表示的各个值落入基本多语言平面中未用的 2048 个值范围内，通常称为替代区域，这样设计十分巧妙，我们可以从中迅速知道<mark>一个代码单元时一个字符的编码</mark>，还是辅助字符的第一或第二部分</p>\n<p>----------  &lt;&lt;Java 核心技术卷 Ⅰ&gt;&gt;P33</p>\n</blockquote>\n<h3 id=\"方法\"><a class=\"markdownIt-Anchor\" href=\"#方法\">#</a> 方法:</h3>\n<table>\n<thead>\n<tr>\n<th>方法声明</th>\n<th>功能介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int offsetCodePoints(int index,int codePointoffset)</td>\n<td>返回此 String 中的索引，该索引从给定的 index 偏移 codePointoffset 码点，由 index 和 codePointoffset 给出的文本范围内的未配对代理计为每个代码点</td>\n</tr>\n<tr>\n<td>int codePointAt(int index)</td>\n<td>返回指定索引处的字符 (Unicode 代码点), 索引引用 char 值 (Unicode 代码单位), 范围从 0 到 lenth () - 1</td>\n</tr>\n<tr>\n<td><strong>StringBuilder 方法</strong></td>\n</tr>\n<tr>\n<td>String appendCodePoint(int cp)</td>\n<td>追加一个码点，并将其转化为一个或者两个代码单元并返回 this</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> atest <span class=\"token operator\">=</span> <span class=\"token string\">\"abcABC😀a\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcABC😀a\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>atest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">int</span> cp1 <span class=\"token operator\">=</span> atest<span class=\"token punctuation\">.</span><span class=\"token function\">offsetByCodePoints</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">int</span> cp4 <span class=\"token operator\">=</span> atest<span class=\"token punctuation\">.</span><span class=\"token function\">offsetByCodePoints</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">int</span> cp5 <span class=\"token operator\">=</span> atest<span class=\"token punctuation\">.</span><span class=\"token function\">offsetByCodePoints</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">int</span> cp7 <span class=\"token operator\">=</span> atest<span class=\"token punctuation\">.</span><span class=\"token function\">offsetByCodePoints</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cp1 is \"</span><span class=\"token operator\">+</span>cp1<span class=\"token operator\">+</span><span class=\"token string\">\"  cp4 is \"</span><span class=\"token operator\">+</span> cp4<span class=\"token operator\">+</span><span class=\"token string\">\"  cp5 is \"</span><span class=\"token operator\">+</span>cp5<span class=\"token operator\">+</span><span class=\"token string\">\"  cp7 is \"</span><span class=\"token operator\">+</span>cp7<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">int</span> cp1unicode <span class=\"token operator\">=</span> atest<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>cp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">int</span> cp4unicode <span class=\"token operator\">=</span> atest<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>cp4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">int</span> cp5unicode <span class=\"token operator\">=</span> atest<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>cp5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">int</span> cp7unicode <span class=\"token operator\">=</span> atest<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>cp7<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a: \"</span><span class=\"token operator\">+</span>cp1unicode<span class=\"token operator\">+</span><span class=\"token string\">\"  A: \"</span><span class=\"token operator\">+</span>cp4unicode<span class=\"token operator\">+</span><span class=\"token string\">\"  😀: \"</span><span class=\"token operator\">+</span>cp5unicode<span class=\"token operator\">+</span><span class=\"token string\">\"  a: \"</span><span class=\"token operator\">+</span>cp7unicode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果:<img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081434856.png\" alt=\"image-20220904101620196\"></p>\n<h4 id=\"offsetbycodepoints\"><a class=\"markdownIt-Anchor\" href=\"#offsetbycodepoints\">#</a> offsetByCodePoints</h4>\n<p><code>public int offsetByCodePoints(int index,int codePointoffset)</code></p>\n<p>这里的 index 就是你指定的任意第 i 个码点，假如你想知道距离第 i 个码点 x 个码点，(x 可正可负) 是相对于第 0 个码点第几个码点，则可以用 offsetByCodePoints (i,x) 得到的你想要的值，比方说</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> astring <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdABCD\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> cpcount <span class=\"token operator\">=</span> astring<span class=\"token punctuation\">.</span><span class=\"token function\">offsetByCodePoints</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 从 0 开始也就是 d</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 对应 ACSII 码值也就是 100</span></pre></td></tr></table></figure><p>cpcount 的值应该是 3 (即表示 d 距离 a 3 个码点，也就是距离第 0 个位置 3 个位置)</p>\n<h4 id=\"codepointat\"><a class=\"markdownIt-Anchor\" href=\"#codepointat\">#</a> codePointAt</h4>\n<p><code>public int codePointAt(int index)</code></p>\n<p>还是以上面那个例子，d 距离 a, 有 3 个位置，这个 3 通过 offsetByCodePoints () 得到，并且就可以看成是一个索引值，通过它你就能找到对应位置上是 d</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> astring <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdABCD\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> cpcount <span class=\"token operator\">=</span> astring<span class=\"token punctuation\">.</span><span class=\"token function\">offsetByCodePoints</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 从 0 开始也就是 d</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 对应 ACSII 码值也就是 100</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> dddunicode <span class=\"token operator\">=</span> astring<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>cpcount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dddunicode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>dddunicode = 100; 这其实是 ASCII 码值</p>\n<h4 id=\"appendcodepoint\"><a class=\"markdownIt-Anchor\" href=\"#appendcodepoint\">#</a> appendCodePoint</h4>\n<p><code>String appendCodePoint(int cp)</code></p>\n<p>追加一个码点，并将其转化为一个或者两个代码单元并返回 this</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> strbud <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        strbud<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>strbud<span class=\"token punctuation\">.</span><span class=\"token function\">appendCodePoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>打印结果: <img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081434104.png\" alt=\"image-20220904103852797\"></p>\n",
            "tags": [
                "知识点",
                "API的区别"
            ]
        }
    ]
}